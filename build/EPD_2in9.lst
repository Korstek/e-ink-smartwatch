ARM GAS  /tmp/cceQyzTj.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"EPD_2in9.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.EPD_Reset,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	EPD_Reset:
  25              	.LFB123:
  26              		.file 1 "Display/e-Paper/EPD_2in9.c"
   1:Display/e-Paper/EPD_2in9.c **** /*****************************************************************************
   2:Display/e-Paper/EPD_2in9.c **** * | File      	:	EPD_2in9.c
   3:Display/e-Paper/EPD_2in9.c **** * | Author      :   Waveshare team
   4:Display/e-Paper/EPD_2in9.c **** * | Function    :   Electronic paper driver
   5:Display/e-Paper/EPD_2in9.c **** * | Info        :
   6:Display/e-Paper/EPD_2in9.c **** *----------------
   7:Display/e-Paper/EPD_2in9.c **** * |	This version:   V2.0
   8:Display/e-Paper/EPD_2in9.c **** * | Date        :   2018-11-06
   9:Display/e-Paper/EPD_2in9.c **** * | Info        :
  10:Display/e-Paper/EPD_2in9.c **** * 1.Remove:ImageBuff[EPD_HEIGHT * EPD_WIDTH / 8]
  11:Display/e-Paper/EPD_2in9.c **** * 2.Change:EPD_Display(UBYTE *Image)
  12:Display/e-Paper/EPD_2in9.c **** *   Need to pass parameters: pointer to cached data
  13:Display/e-Paper/EPD_2in9.c **** * 3.Change:
  14:Display/e-Paper/EPD_2in9.c **** *   EPD_RST -> EPD_RST_PIN
  15:Display/e-Paper/EPD_2in9.c **** *   EPD_DC -> EPD_DC_PIN
  16:Display/e-Paper/EPD_2in9.c **** *   EPD_CS -> EPD_CS_PIN
  17:Display/e-Paper/EPD_2in9.c **** *   EPD_BUSY -> EPD_BUSY_PIN
  18:Display/e-Paper/EPD_2in9.c **** #
  19:Display/e-Paper/EPD_2in9.c **** # Permission is hereby granted, free of charge, to any person obtaining a copy
  20:Display/e-Paper/EPD_2in9.c **** # of this software and associated documnetation files (the "Software"), to deal
  21:Display/e-Paper/EPD_2in9.c **** # in the Software without restriction, including without limitation the rights
  22:Display/e-Paper/EPD_2in9.c **** # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  23:Display/e-Paper/EPD_2in9.c **** # copies of the Software, and to permit persons to  whom the Software is
  24:Display/e-Paper/EPD_2in9.c **** # furished to do so, subject to the following conditions:
  25:Display/e-Paper/EPD_2in9.c **** #
  26:Display/e-Paper/EPD_2in9.c **** # The above copyright notice and this permission notice shall be included in
  27:Display/e-Paper/EPD_2in9.c **** # all copies or substantial portions of the Software.
  28:Display/e-Paper/EPD_2in9.c **** #
  29:Display/e-Paper/EPD_2in9.c **** # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30:Display/e-Paper/EPD_2in9.c **** # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31:Display/e-Paper/EPD_2in9.c **** # FITNESS OR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  32:Display/e-Paper/EPD_2in9.c **** # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
ARM GAS  /tmp/cceQyzTj.s 			page 2


  33:Display/e-Paper/EPD_2in9.c **** # LIABILITY WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  34:Display/e-Paper/EPD_2in9.c **** # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  35:Display/e-Paper/EPD_2in9.c **** # THE SOFTWARE.
  36:Display/e-Paper/EPD_2in9.c **** #
  37:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
  38:Display/e-Paper/EPD_2in9.c **** #include "EPD_2in9.h"
  39:Display/e-Paper/EPD_2in9.c **** #include "Debug.h"
  40:Display/e-Paper/EPD_2in9.c **** 
  41:Display/e-Paper/EPD_2in9.c **** const unsigned char lut_full_update[] = {
  42:Display/e-Paper/EPD_2in9.c ****     0x02, 0x02, 0x01, 0x11, 0x12, 0x12, 0x22, 0x22,
  43:Display/e-Paper/EPD_2in9.c ****     0x66, 0x69, 0x69, 0x59, 0x58, 0x99, 0x99, 0x88,
  44:Display/e-Paper/EPD_2in9.c ****     0x00, 0x00, 0x00, 0x00, 0xF8, 0xB4, 0x13, 0x51,
  45:Display/e-Paper/EPD_2in9.c ****     0x35, 0x51, 0x51, 0x19, 0x01, 0x00
  46:Display/e-Paper/EPD_2in9.c **** };
  47:Display/e-Paper/EPD_2in9.c **** 
  48:Display/e-Paper/EPD_2in9.c **** const unsigned char lut_partial_update[] = {
  49:Display/e-Paper/EPD_2in9.c ****     0x10, 0x18, 0x18, 0x08, 0x18, 0x18, 0x08, 0x00,
  50:Display/e-Paper/EPD_2in9.c ****     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  51:Display/e-Paper/EPD_2in9.c ****     0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x44, 0x12,
  52:Display/e-Paper/EPD_2in9.c ****     0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  53:Display/e-Paper/EPD_2in9.c **** };
  54:Display/e-Paper/EPD_2in9.c **** 
  55:Display/e-Paper/EPD_2in9.c **** 
  56:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
  57:Display/e-Paper/EPD_2in9.c **** function :	Software reset
  58:Display/e-Paper/EPD_2in9.c **** parameter:
  59:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
  60:Display/e-Paper/EPD_2in9.c **** static void EPD_Reset(void)
  61:Display/e-Paper/EPD_2in9.c **** {
  27              		.loc 1 61 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  62:Display/e-Paper/EPD_2in9.c ****     DEV_Digital_Write(EPD_RST_PIN, 1);
  36              		.loc 1 62 0
  37 0002 0122     		movs	r2, #1
  38 0004 4FF48071 		mov	r1, #256
  39 0008 4FF09040 		mov	r0, #1207959552
  40 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
  41              	.LVL0:
  63:Display/e-Paper/EPD_2in9.c ****     DEV_Delay_ms(200);
  42              		.loc 1 63 0
  43 0010 C820     		movs	r0, #200
  44 0012 FFF7FEFF 		bl	HAL_Delay
  45              	.LVL1:
  64:Display/e-Paper/EPD_2in9.c ****     DEV_Digital_Write(EPD_RST_PIN, 0);
  46              		.loc 1 64 0
  47 0016 0022     		movs	r2, #0
  48 0018 4FF48071 		mov	r1, #256
  49 001c 4FF09040 		mov	r0, #1207959552
  50 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
  51              	.LVL2:
ARM GAS  /tmp/cceQyzTj.s 			page 3


  65:Display/e-Paper/EPD_2in9.c ****     DEV_Delay_ms(200);
  52              		.loc 1 65 0
  53 0024 C820     		movs	r0, #200
  54 0026 FFF7FEFF 		bl	HAL_Delay
  55              	.LVL3:
  66:Display/e-Paper/EPD_2in9.c ****     DEV_Digital_Write(EPD_RST_PIN, 1);
  56              		.loc 1 66 0
  57 002a 0122     		movs	r2, #1
  58 002c 4FF48071 		mov	r1, #256
  59 0030 4FF09040 		mov	r0, #1207959552
  60 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
  61              	.LVL4:
  67:Display/e-Paper/EPD_2in9.c ****     DEV_Delay_ms(200);
  62              		.loc 1 67 0
  63 0038 C820     		movs	r0, #200
  64 003a FFF7FEFF 		bl	HAL_Delay
  65              	.LVL5:
  68:Display/e-Paper/EPD_2in9.c **** }
  66              		.loc 1 68 0
  67 003e 08BD     		pop	{r3, pc}
  68              		.cfi_endproc
  69              	.LFE123:
  71              		.section	.text.EPD_SendCommand,"ax",%progbits
  72              		.align	1
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu fpv4-sp-d16
  78              	EPD_SendCommand:
  79              	.LFB124:
  69:Display/e-Paper/EPD_2in9.c **** 
  70:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
  71:Display/e-Paper/EPD_2in9.c **** function :	send command
  72:Display/e-Paper/EPD_2in9.c **** parameter:
  73:Display/e-Paper/EPD_2in9.c ****      Reg : Command register
  74:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
  75:Display/e-Paper/EPD_2in9.c **** static void EPD_SendCommand(UBYTE Reg)
  76:Display/e-Paper/EPD_2in9.c **** {
  80              		.loc 1 76 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              	.LVL6:
  85 0000 38B5     		push	{r3, r4, r5, lr}
  86              	.LCFI1:
  87              		.cfi_def_cfa_offset 16
  88              		.cfi_offset 3, -16
  89              		.cfi_offset 4, -12
  90              		.cfi_offset 5, -8
  91              		.cfi_offset 14, -4
  92 0002 0546     		mov	r5, r0
  77:Display/e-Paper/EPD_2in9.c ****     DEV_Digital_Write(EPD_DC_PIN, 0);
  93              		.loc 1 77 0
  94 0004 0022     		movs	r2, #0
  95 0006 4FF48061 		mov	r1, #1024
  96 000a 4FF09040 		mov	r0, #1207959552
  97              	.LVL7:
ARM GAS  /tmp/cceQyzTj.s 			page 4


  98 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
  99              	.LVL8:
  78:Display/e-Paper/EPD_2in9.c ****     DEV_Digital_Write(EPD_CS_PIN, 0);
 100              		.loc 1 78 0
 101 0012 074C     		ldr	r4, .L5
 102 0014 0022     		movs	r2, #0
 103 0016 1021     		movs	r1, #16
 104 0018 2046     		mov	r0, r4
 105 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 106              	.LVL9:
  79:Display/e-Paper/EPD_2in9.c ****     DEV_SPI_WriteByte(Reg);
 107              		.loc 1 79 0
 108 001e 2846     		mov	r0, r5
 109 0020 FFF7FEFF 		bl	DEV_SPI_WriteByte
 110              	.LVL10:
  80:Display/e-Paper/EPD_2in9.c ****     DEV_Digital_Write(EPD_CS_PIN, 1);
 111              		.loc 1 80 0
 112 0024 0122     		movs	r2, #1
 113 0026 1021     		movs	r1, #16
 114 0028 2046     		mov	r0, r4
 115 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 116              	.LVL11:
  81:Display/e-Paper/EPD_2in9.c **** }
 117              		.loc 1 81 0
 118 002e 38BD     		pop	{r3, r4, r5, pc}
 119              	.L6:
 120              		.align	2
 121              	.L5:
 122 0030 00040048 		.word	1207960576
 123              		.cfi_endproc
 124              	.LFE124:
 126              		.section	.text.EPD_SendData,"ax",%progbits
 127              		.align	1
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	EPD_SendData:
 134              	.LFB125:
  82:Display/e-Paper/EPD_2in9.c **** 
  83:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
  84:Display/e-Paper/EPD_2in9.c **** function :	send data
  85:Display/e-Paper/EPD_2in9.c **** parameter:
  86:Display/e-Paper/EPD_2in9.c ****     Data : Write data
  87:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
  88:Display/e-Paper/EPD_2in9.c **** static void EPD_SendData(UBYTE Data)
  89:Display/e-Paper/EPD_2in9.c **** {
 135              		.loc 1 89 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              	.LVL12:
 140 0000 38B5     		push	{r3, r4, r5, lr}
 141              	.LCFI2:
 142              		.cfi_def_cfa_offset 16
 143              		.cfi_offset 3, -16
 144              		.cfi_offset 4, -12
ARM GAS  /tmp/cceQyzTj.s 			page 5


 145              		.cfi_offset 5, -8
 146              		.cfi_offset 14, -4
 147 0002 0546     		mov	r5, r0
  90:Display/e-Paper/EPD_2in9.c ****     DEV_Digital_Write(EPD_DC_PIN, 1);
 148              		.loc 1 90 0
 149 0004 0122     		movs	r2, #1
 150 0006 4FF48061 		mov	r1, #1024
 151 000a 4FF09040 		mov	r0, #1207959552
 152              	.LVL13:
 153 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 154              	.LVL14:
  91:Display/e-Paper/EPD_2in9.c ****     DEV_Digital_Write(EPD_CS_PIN, 0);
 155              		.loc 1 91 0
 156 0012 074C     		ldr	r4, .L9
 157 0014 0022     		movs	r2, #0
 158 0016 1021     		movs	r1, #16
 159 0018 2046     		mov	r0, r4
 160 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 161              	.LVL15:
  92:Display/e-Paper/EPD_2in9.c ****     DEV_SPI_WriteByte(Data);
 162              		.loc 1 92 0
 163 001e 2846     		mov	r0, r5
 164 0020 FFF7FEFF 		bl	DEV_SPI_WriteByte
 165              	.LVL16:
  93:Display/e-Paper/EPD_2in9.c ****     DEV_Digital_Write(EPD_CS_PIN, 1);
 166              		.loc 1 93 0
 167 0024 0122     		movs	r2, #1
 168 0026 1021     		movs	r1, #16
 169 0028 2046     		mov	r0, r4
 170 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 171              	.LVL17:
  94:Display/e-Paper/EPD_2in9.c **** }
 172              		.loc 1 94 0
 173 002e 38BD     		pop	{r3, r4, r5, pc}
 174              	.L10:
 175              		.align	2
 176              	.L9:
 177 0030 00040048 		.word	1207960576
 178              		.cfi_endproc
 179              	.LFE125:
 181              		.section	.text.EPD_SetWindows,"ax",%progbits
 182              		.align	1
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu fpv4-sp-d16
 188              	EPD_SetWindows:
 189              	.LFB127:
  95:Display/e-Paper/EPD_2in9.c **** 
  96:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
  97:Display/e-Paper/EPD_2in9.c **** function :	Wait until the busy_pin goes LOW
  98:Display/e-Paper/EPD_2in9.c **** parameter:
  99:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
 100:Display/e-Paper/EPD_2in9.c **** void EPD_WaitUntilIdle(void)
 101:Display/e-Paper/EPD_2in9.c **** {
 102:Display/e-Paper/EPD_2in9.c ****     Debug("e-Paper busy\r\n");
 103:Display/e-Paper/EPD_2in9.c ****     while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
ARM GAS  /tmp/cceQyzTj.s 			page 6


 104:Display/e-Paper/EPD_2in9.c ****         DEV_Delay_ms(100);
 105:Display/e-Paper/EPD_2in9.c ****     }
 106:Display/e-Paper/EPD_2in9.c ****     Debug("e-Paper busy release\r\n");
 107:Display/e-Paper/EPD_2in9.c **** }
 108:Display/e-Paper/EPD_2in9.c **** 
 109:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
 110:Display/e-Paper/EPD_2in9.c **** function :	Setting the display window
 111:Display/e-Paper/EPD_2in9.c **** parameter:
 112:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
 113:Display/e-Paper/EPD_2in9.c **** static void EPD_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
 114:Display/e-Paper/EPD_2in9.c **** {
 190              		.loc 1 114 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              	.LVL18:
 195 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 196              	.LCFI3:
 197              		.cfi_def_cfa_offset 24
 198              		.cfi_offset 3, -24
 199              		.cfi_offset 4, -20
 200              		.cfi_offset 5, -16
 201              		.cfi_offset 6, -12
 202              		.cfi_offset 7, -8
 203              		.cfi_offset 14, -4
 204 0002 0746     		mov	r7, r0
 205 0004 0D46     		mov	r5, r1
 206 0006 1646     		mov	r6, r2
 207 0008 1C46     		mov	r4, r3
 115:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(SET_RAM_X_ADDRESS_START_END_POSITION);
 208              		.loc 1 115 0
 209 000a 4420     		movs	r0, #68
 210              	.LVL19:
 211 000c FFF7FEFF 		bl	EPD_SendCommand
 212              	.LVL20:
 116:Display/e-Paper/EPD_2in9.c ****     EPD_SendData((Xstart >> 3) & 0xFF);
 213              		.loc 1 116 0
 214 0010 C7F3C700 		ubfx	r0, r7, #3, #8
 215 0014 FFF7FEFF 		bl	EPD_SendData
 216              	.LVL21:
 117:Display/e-Paper/EPD_2in9.c ****     EPD_SendData((Xend >> 3) & 0xFF);
 217              		.loc 1 117 0
 218 0018 C6F3C700 		ubfx	r0, r6, #3, #8
 219 001c FFF7FEFF 		bl	EPD_SendData
 220              	.LVL22:
 118:Display/e-Paper/EPD_2in9.c **** 
 119:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(SET_RAM_Y_ADDRESS_START_END_POSITION);
 221              		.loc 1 119 0
 222 0020 4520     		movs	r0, #69
 223 0022 FFF7FEFF 		bl	EPD_SendCommand
 224              	.LVL23:
 120:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(Ystart & 0xFF);
 225              		.loc 1 120 0
 226 0026 E8B2     		uxtb	r0, r5
 227 0028 FFF7FEFF 		bl	EPD_SendData
 228              	.LVL24:
 121:Display/e-Paper/EPD_2in9.c ****     EPD_SendData((Ystart >> 8) & 0xFF);
ARM GAS  /tmp/cceQyzTj.s 			page 7


 229              		.loc 1 121 0
 230 002c 280A     		lsrs	r0, r5, #8
 231 002e FFF7FEFF 		bl	EPD_SendData
 232              	.LVL25:
 122:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(Yend & 0xFF);
 233              		.loc 1 122 0
 234 0032 E0B2     		uxtb	r0, r4
 235 0034 FFF7FEFF 		bl	EPD_SendData
 236              	.LVL26:
 123:Display/e-Paper/EPD_2in9.c ****     EPD_SendData((Yend >> 8) & 0xFF);
 237              		.loc 1 123 0
 238 0038 200A     		lsrs	r0, r4, #8
 239 003a FFF7FEFF 		bl	EPD_SendData
 240              	.LVL27:
 124:Display/e-Paper/EPD_2in9.c **** }
 241              		.loc 1 124 0
 242 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 243              		.cfi_endproc
 244              	.LFE127:
 246              		.section	.text.EPD_SetCursor,"ax",%progbits
 247              		.align	1
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	EPD_SetCursor:
 254              	.LFB128:
 125:Display/e-Paper/EPD_2in9.c **** 
 126:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
 127:Display/e-Paper/EPD_2in9.c **** function :	Set Cursor
 128:Display/e-Paper/EPD_2in9.c **** parameter:
 129:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
 130:Display/e-Paper/EPD_2in9.c **** static void EPD_SetCursor(UWORD Xstart, UWORD Ystart)
 131:Display/e-Paper/EPD_2in9.c **** {
 255              		.loc 1 131 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              	.LVL28:
 260 0000 38B5     		push	{r3, r4, r5, lr}
 261              	.LCFI4:
 262              		.cfi_def_cfa_offset 16
 263              		.cfi_offset 3, -16
 264              		.cfi_offset 4, -12
 265              		.cfi_offset 5, -8
 266              		.cfi_offset 14, -4
 267 0002 0546     		mov	r5, r0
 268 0004 0C46     		mov	r4, r1
 132:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(SET_RAM_X_ADDRESS_COUNTER);
 269              		.loc 1 132 0
 270 0006 4E20     		movs	r0, #78
 271              	.LVL29:
 272 0008 FFF7FEFF 		bl	EPD_SendCommand
 273              	.LVL30:
 133:Display/e-Paper/EPD_2in9.c ****     EPD_SendData((Xstart >> 3) & 0xFF);
 274              		.loc 1 133 0
 275 000c C5F3C700 		ubfx	r0, r5, #3, #8
ARM GAS  /tmp/cceQyzTj.s 			page 8


 276 0010 FFF7FEFF 		bl	EPD_SendData
 277              	.LVL31:
 134:Display/e-Paper/EPD_2in9.c **** 
 135:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(SET_RAM_Y_ADDRESS_COUNTER);
 278              		.loc 1 135 0
 279 0014 4F20     		movs	r0, #79
 280 0016 FFF7FEFF 		bl	EPD_SendCommand
 281              	.LVL32:
 136:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(Ystart & 0xFF);
 282              		.loc 1 136 0
 283 001a E0B2     		uxtb	r0, r4
 284 001c FFF7FEFF 		bl	EPD_SendData
 285              	.LVL33:
 137:Display/e-Paper/EPD_2in9.c ****     EPD_SendData((Ystart >> 8) & 0xFF);
 286              		.loc 1 137 0
 287 0020 200A     		lsrs	r0, r4, #8
 288 0022 FFF7FEFF 		bl	EPD_SendData
 289              	.LVL34:
 138:Display/e-Paper/EPD_2in9.c **** 
 139:Display/e-Paper/EPD_2in9.c **** }
 290              		.loc 1 139 0
 291 0026 38BD     		pop	{r3, r4, r5, pc}
 292              		.cfi_endproc
 293              	.LFE128:
 295              		.section	.text.EPD_WaitUntilIdle,"ax",%progbits
 296              		.align	1
 297              		.global	EPD_WaitUntilIdle
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu fpv4-sp-d16
 303              	EPD_WaitUntilIdle:
 304              	.LFB126:
 101:Display/e-Paper/EPD_2in9.c ****     Debug("e-Paper busy\r\n");
 305              		.loc 1 101 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309 0000 08B5     		push	{r3, lr}
 310              	.LCFI5:
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 3, -8
 313              		.cfi_offset 14, -4
 103:Display/e-Paper/EPD_2in9.c ****         DEV_Delay_ms(100);
 314              		.loc 1 103 0
 315 0002 02E0     		b	.L16
 316              	.L17:
 104:Display/e-Paper/EPD_2in9.c ****     }
 317              		.loc 1 104 0
 318 0004 6420     		movs	r0, #100
 319 0006 FFF7FEFF 		bl	HAL_Delay
 320              	.LVL35:
 321              	.L16:
 103:Display/e-Paper/EPD_2in9.c ****         DEV_Delay_ms(100);
 322              		.loc 1 103 0
 323 000a 4FF48061 		mov	r1, #1024
 324 000e 0348     		ldr	r0, .L19
ARM GAS  /tmp/cceQyzTj.s 			page 9


 325 0010 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 326              	.LVL36:
 327 0014 0128     		cmp	r0, #1
 328 0016 F5D0     		beq	.L17
 107:Display/e-Paper/EPD_2in9.c **** 
 329              		.loc 1 107 0
 330 0018 08BD     		pop	{r3, pc}
 331              	.L20:
 332 001a 00BF     		.align	2
 333              	.L19:
 334 001c 00040048 		.word	1207960576
 335              		.cfi_endproc
 336              	.LFE126:
 338              		.section	.text.EPD_TurnOnDisplay,"ax",%progbits
 339              		.align	1
 340              		.syntax unified
 341              		.thumb
 342              		.thumb_func
 343              		.fpu fpv4-sp-d16
 345              	EPD_TurnOnDisplay:
 346              	.LFB129:
 140:Display/e-Paper/EPD_2in9.c **** 
 141:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
 142:Display/e-Paper/EPD_2in9.c **** function :	Turn On Display
 143:Display/e-Paper/EPD_2in9.c **** parameter:
 144:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
 145:Display/e-Paper/EPD_2in9.c **** static void EPD_TurnOnDisplay(void)
 146:Display/e-Paper/EPD_2in9.c **** {
 347              		.loc 1 146 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351 0000 08B5     		push	{r3, lr}
 352              	.LCFI6:
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 3, -8
 355              		.cfi_offset 14, -4
 147:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(DISPLAY_UPDATE_CONTROL_2);
 356              		.loc 1 147 0
 357 0002 2220     		movs	r0, #34
 358 0004 FFF7FEFF 		bl	EPD_SendCommand
 359              	.LVL37:
 148:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(0xC4);
 360              		.loc 1 148 0
 361 0008 C420     		movs	r0, #196
 362 000a FFF7FEFF 		bl	EPD_SendData
 363              	.LVL38:
 149:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(MASTER_ACTIVATION);
 364              		.loc 1 149 0
 365 000e 2020     		movs	r0, #32
 366 0010 FFF7FEFF 		bl	EPD_SendCommand
 367              	.LVL39:
 150:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(TERMINATE_FRAME_READ_WRITE);
 368              		.loc 1 150 0
 369 0014 FF20     		movs	r0, #255
 370 0016 FFF7FEFF 		bl	EPD_SendCommand
 371              	.LVL40:
ARM GAS  /tmp/cceQyzTj.s 			page 10


 151:Display/e-Paper/EPD_2in9.c **** 
 152:Display/e-Paper/EPD_2in9.c ****     EPD_WaitUntilIdle();
 372              		.loc 1 152 0
 373 001a FFF7FEFF 		bl	EPD_WaitUntilIdle
 374              	.LVL41:
 153:Display/e-Paper/EPD_2in9.c **** }
 375              		.loc 1 153 0
 376 001e 08BD     		pop	{r3, pc}
 377              		.cfi_endproc
 378              	.LFE129:
 380              		.section	.text.EPD_Init,"ax",%progbits
 381              		.align	1
 382              		.global	EPD_Init
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu fpv4-sp-d16
 388              	EPD_Init:
 389              	.LFB130:
 154:Display/e-Paper/EPD_2in9.c **** 
 155:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
 156:Display/e-Paper/EPD_2in9.c **** function :	Initialize the e-Paper register
 157:Display/e-Paper/EPD_2in9.c **** parameter:
 158:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
 159:Display/e-Paper/EPD_2in9.c **** UBYTE EPD_Init(const unsigned char* lut)
 160:Display/e-Paper/EPD_2in9.c **** {
 390              		.loc 1 160 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394              	.LVL42:
 395 0000 38B5     		push	{r3, r4, r5, lr}
 396              	.LCFI7:
 397              		.cfi_def_cfa_offset 16
 398              		.cfi_offset 3, -16
 399              		.cfi_offset 4, -12
 400              		.cfi_offset 5, -8
 401              		.cfi_offset 14, -4
 402 0002 0546     		mov	r5, r0
 161:Display/e-Paper/EPD_2in9.c ****     EPD_Reset();
 403              		.loc 1 161 0
 404 0004 FFF7FEFF 		bl	EPD_Reset
 405              	.LVL43:
 162:Display/e-Paper/EPD_2in9.c **** 
 163:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(DRIVER_OUTPUT_CONTROL);
 406              		.loc 1 163 0
 407 0008 0120     		movs	r0, #1
 408 000a FFF7FEFF 		bl	EPD_SendCommand
 409              	.LVL44:
 164:Display/e-Paper/EPD_2in9.c ****     EPD_SendData((EPD_HEIGHT - 1) & 0xFF);
 410              		.loc 1 164 0
 411 000e 2720     		movs	r0, #39
 412 0010 FFF7FEFF 		bl	EPD_SendData
 413              	.LVL45:
 165:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(((EPD_HEIGHT - 1) >> 8) & 0xFF);
 414              		.loc 1 165 0
 415 0014 0120     		movs	r0, #1
ARM GAS  /tmp/cceQyzTj.s 			page 11


 416 0016 FFF7FEFF 		bl	EPD_SendData
 417              	.LVL46:
 166:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(0x00);                     // GD = 0; SM = 0; TB = 0;
 418              		.loc 1 166 0
 419 001a 0020     		movs	r0, #0
 420 001c FFF7FEFF 		bl	EPD_SendData
 421              	.LVL47:
 167:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(BOOSTER_SOFT_START_CONTROL);
 422              		.loc 1 167 0
 423 0020 0C20     		movs	r0, #12
 424 0022 FFF7FEFF 		bl	EPD_SendCommand
 425              	.LVL48:
 168:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(0xD7);
 426              		.loc 1 168 0
 427 0026 D720     		movs	r0, #215
 428 0028 FFF7FEFF 		bl	EPD_SendData
 429              	.LVL49:
 169:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(0xD6);
 430              		.loc 1 169 0
 431 002c D620     		movs	r0, #214
 432 002e FFF7FEFF 		bl	EPD_SendData
 433              	.LVL50:
 170:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(0x9D);
 434              		.loc 1 170 0
 435 0032 9D20     		movs	r0, #157
 436 0034 FFF7FEFF 		bl	EPD_SendData
 437              	.LVL51:
 171:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(WRITE_VCOM_REGISTER);
 438              		.loc 1 171 0
 439 0038 2C20     		movs	r0, #44
 440 003a FFF7FEFF 		bl	EPD_SendCommand
 441              	.LVL52:
 172:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(0xA8);                     // VCOM 7C
 442              		.loc 1 172 0
 443 003e A820     		movs	r0, #168
 444 0040 FFF7FEFF 		bl	EPD_SendData
 445              	.LVL53:
 173:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(SET_DUMMY_LINE_PERIOD);
 446              		.loc 1 173 0
 447 0044 3A20     		movs	r0, #58
 448 0046 FFF7FEFF 		bl	EPD_SendCommand
 449              	.LVL54:
 174:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(0x1A);                     // 4 dummy lines per gate
 450              		.loc 1 174 0
 451 004a 1A20     		movs	r0, #26
 452 004c FFF7FEFF 		bl	EPD_SendData
 453              	.LVL55:
 175:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(SET_GATE_TIME);
 454              		.loc 1 175 0
 455 0050 3B20     		movs	r0, #59
 456 0052 FFF7FEFF 		bl	EPD_SendCommand
 457              	.LVL56:
 176:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(0x08);                     // 2us per line
 458              		.loc 1 176 0
 459 0056 0820     		movs	r0, #8
 460 0058 FFF7FEFF 		bl	EPD_SendData
 461              	.LVL57:
ARM GAS  /tmp/cceQyzTj.s 			page 12


 177:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(DATA_ENTRY_MODE_SETTING);
 462              		.loc 1 177 0
 463 005c 1120     		movs	r0, #17
 464 005e FFF7FEFF 		bl	EPD_SendCommand
 465              	.LVL58:
 178:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(0x03);
 466              		.loc 1 178 0
 467 0062 0320     		movs	r0, #3
 468 0064 FFF7FEFF 		bl	EPD_SendData
 469              	.LVL59:
 179:Display/e-Paper/EPD_2in9.c **** 
 180:Display/e-Paper/EPD_2in9.c ****     //set the look-up table register
 181:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(WRITE_LUT_REGISTER);
 470              		.loc 1 181 0
 471 0068 3220     		movs	r0, #50
 472 006a FFF7FEFF 		bl	EPD_SendCommand
 473              	.LVL60:
 474              	.LBB2:
 182:Display/e-Paper/EPD_2in9.c ****     for (UWORD i = 0; i < 30; i++) {
 475              		.loc 1 182 0
 476 006e 0024     		movs	r4, #0
 477 0070 04E0     		b	.L24
 478              	.LVL61:
 479              	.L25:
 183:Display/e-Paper/EPD_2in9.c ****         EPD_SendData(lut[i]);
 480              		.loc 1 183 0 discriminator 3
 481 0072 285D     		ldrb	r0, [r5, r4]	@ zero_extendqisi2
 482 0074 FFF7FEFF 		bl	EPD_SendData
 483              	.LVL62:
 182:Display/e-Paper/EPD_2in9.c ****     for (UWORD i = 0; i < 30; i++) {
 484              		.loc 1 182 0 discriminator 3
 485 0078 0134     		adds	r4, r4, #1
 486              	.LVL63:
 487 007a A4B2     		uxth	r4, r4
 488              	.LVL64:
 489              	.L24:
 182:Display/e-Paper/EPD_2in9.c ****     for (UWORD i = 0; i < 30; i++) {
 490              		.loc 1 182 0 is_stmt 0 discriminator 1
 491 007c 1D2C     		cmp	r4, #29
 492 007e F8D9     		bls	.L25
 493              	.LBE2:
 184:Display/e-Paper/EPD_2in9.c ****     }
 185:Display/e-Paper/EPD_2in9.c ****     return 0;
 186:Display/e-Paper/EPD_2in9.c **** }
 494              		.loc 1 186 0 is_stmt 1
 495 0080 0020     		movs	r0, #0
 496 0082 38BD     		pop	{r3, r4, r5, pc}
 497              		.cfi_endproc
 498              	.LFE130:
 500              		.section	.text.EPD_Clear,"ax",%progbits
 501              		.align	1
 502              		.global	EPD_Clear
 503              		.syntax unified
 504              		.thumb
 505              		.thumb_func
 506              		.fpu fpv4-sp-d16
 508              	EPD_Clear:
ARM GAS  /tmp/cceQyzTj.s 			page 13


 509              	.LFB131:
 187:Display/e-Paper/EPD_2in9.c **** 
 188:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
 189:Display/e-Paper/EPD_2in9.c **** function :	Clear screen
 190:Display/e-Paper/EPD_2in9.c **** parameter:
 191:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
 192:Display/e-Paper/EPD_2in9.c **** void EPD_Clear(void)
 193:Display/e-Paper/EPD_2in9.c **** {
 510              		.loc 1 193 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514 0000 38B5     		push	{r3, r4, r5, lr}
 515              	.LCFI8:
 516              		.cfi_def_cfa_offset 16
 517              		.cfi_offset 3, -16
 518              		.cfi_offset 4, -12
 519              		.cfi_offset 5, -8
 520              		.cfi_offset 14, -4
 521              	.LVL65:
 194:Display/e-Paper/EPD_2in9.c ****     UWORD Width, Height;
 195:Display/e-Paper/EPD_2in9.c ****     Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
 196:Display/e-Paper/EPD_2in9.c ****     Height = EPD_HEIGHT;
 197:Display/e-Paper/EPD_2in9.c ****     EPD_SetWindows(0, 0, EPD_WIDTH, EPD_HEIGHT);
 522              		.loc 1 197 0
 523 0002 4FF49473 		mov	r3, #296
 524 0006 8022     		movs	r2, #128
 525 0008 0021     		movs	r1, #0
 526 000a 0846     		mov	r0, r1
 527 000c FFF7FEFF 		bl	EPD_SetWindows
 528              	.LVL66:
 529              	.LBB3:
 198:Display/e-Paper/EPD_2in9.c ****     for (UWORD j = 0; j < Height; j++) {
 530              		.loc 1 198 0
 531 0010 0025     		movs	r5, #0
 532 0012 08E0     		b	.L28
 533              	.LVL67:
 534              	.L30:
 535              	.LBB4:
 199:Display/e-Paper/EPD_2in9.c ****         EPD_SetCursor(0, j);
 200:Display/e-Paper/EPD_2in9.c ****         EPD_SendCommand(WRITE_RAM);
 201:Display/e-Paper/EPD_2in9.c ****         for (UWORD i = 0; i < Width; i++) {
 202:Display/e-Paper/EPD_2in9.c ****             EPD_SendData(0XFF);
 536              		.loc 1 202 0 discriminator 3
 537 0014 FF20     		movs	r0, #255
 538 0016 FFF7FEFF 		bl	EPD_SendData
 539              	.LVL68:
 201:Display/e-Paper/EPD_2in9.c ****             EPD_SendData(0XFF);
 540              		.loc 1 201 0 discriminator 3
 541 001a 0134     		adds	r4, r4, #1
 542              	.LVL69:
 543 001c A4B2     		uxth	r4, r4
 544              	.LVL70:
 545              	.L29:
 201:Display/e-Paper/EPD_2in9.c ****             EPD_SendData(0XFF);
 546              		.loc 1 201 0 is_stmt 0 discriminator 1
 547 001e 0F2C     		cmp	r4, #15
ARM GAS  /tmp/cceQyzTj.s 			page 14


 548 0020 F8D9     		bls	.L30
 549              	.LBE4:
 198:Display/e-Paper/EPD_2in9.c ****     for (UWORD j = 0; j < Height; j++) {
 550              		.loc 1 198 0 is_stmt 1 discriminator 2
 551 0022 0135     		adds	r5, r5, #1
 552              	.LVL71:
 553 0024 ADB2     		uxth	r5, r5
 554              	.LVL72:
 555              	.L28:
 198:Display/e-Paper/EPD_2in9.c ****     for (UWORD j = 0; j < Height; j++) {
 556              		.loc 1 198 0 is_stmt 0 discriminator 1
 557 0026 B5F5947F 		cmp	r5, #296
 558 002a 08D2     		bcs	.L33
 199:Display/e-Paper/EPD_2in9.c ****         EPD_SetCursor(0, j);
 559              		.loc 1 199 0 is_stmt 1
 560 002c 2946     		mov	r1, r5
 561 002e 0020     		movs	r0, #0
 562 0030 FFF7FEFF 		bl	EPD_SetCursor
 563              	.LVL73:
 200:Display/e-Paper/EPD_2in9.c ****         for (UWORD i = 0; i < Width; i++) {
 564              		.loc 1 200 0
 565 0034 2420     		movs	r0, #36
 566 0036 FFF7FEFF 		bl	EPD_SendCommand
 567              	.LVL74:
 568              	.LBB5:
 201:Display/e-Paper/EPD_2in9.c ****             EPD_SendData(0XFF);
 569              		.loc 1 201 0
 570 003a 0024     		movs	r4, #0
 571 003c EFE7     		b	.L29
 572              	.LVL75:
 573              	.L33:
 574              	.LBE5:
 575              	.LBE3:
 203:Display/e-Paper/EPD_2in9.c ****         }
 204:Display/e-Paper/EPD_2in9.c ****     }
 205:Display/e-Paper/EPD_2in9.c ****     EPD_TurnOnDisplay();
 576              		.loc 1 205 0
 577 003e FFF7FEFF 		bl	EPD_TurnOnDisplay
 578              	.LVL76:
 206:Display/e-Paper/EPD_2in9.c **** }
 579              		.loc 1 206 0
 580 0042 38BD     		pop	{r3, r4, r5, pc}
 581              		.cfi_endproc
 582              	.LFE131:
 584              		.section	.text.EPD_Display,"ax",%progbits
 585              		.align	1
 586              		.global	EPD_Display
 587              		.syntax unified
 588              		.thumb
 589              		.thumb_func
 590              		.fpu fpv4-sp-d16
 592              	EPD_Display:
 593              	.LFB132:
 207:Display/e-Paper/EPD_2in9.c **** 
 208:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
 209:Display/e-Paper/EPD_2in9.c **** function :	Sends the image buffer in RAM to e-Paper and displays
 210:Display/e-Paper/EPD_2in9.c **** parameter:
ARM GAS  /tmp/cceQyzTj.s 			page 15


 211:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
 212:Display/e-Paper/EPD_2in9.c **** void EPD_Display(UBYTE *Image)
 213:Display/e-Paper/EPD_2in9.c **** {
 594              		.loc 1 213 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              	.LVL77:
 599 0000 70B5     		push	{r4, r5, r6, lr}
 600              	.LCFI9:
 601              		.cfi_def_cfa_offset 16
 602              		.cfi_offset 4, -16
 603              		.cfi_offset 5, -12
 604              		.cfi_offset 6, -8
 605              		.cfi_offset 14, -4
 606 0002 0646     		mov	r6, r0
 607              	.LVL78:
 214:Display/e-Paper/EPD_2in9.c ****     UWORD Width, Height;
 215:Display/e-Paper/EPD_2in9.c ****     Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
 216:Display/e-Paper/EPD_2in9.c ****     Height = EPD_HEIGHT;
 217:Display/e-Paper/EPD_2in9.c **** 
 218:Display/e-Paper/EPD_2in9.c ****     UDOUBLE Addr = 0;
 219:Display/e-Paper/EPD_2in9.c ****     // UDOUBLE Offset = ImageName;
 220:Display/e-Paper/EPD_2in9.c ****     EPD_SetWindows(0, 0, EPD_WIDTH, EPD_HEIGHT);
 608              		.loc 1 220 0
 609 0004 4FF49473 		mov	r3, #296
 610 0008 8022     		movs	r2, #128
 611 000a 0021     		movs	r1, #0
 612 000c 0846     		mov	r0, r1
 613              	.LVL79:
 614 000e FFF7FEFF 		bl	EPD_SetWindows
 615              	.LVL80:
 616              	.LBB6:
 221:Display/e-Paper/EPD_2in9.c ****     for (UWORD j = 0; j < Height; j++) {
 617              		.loc 1 221 0
 618 0012 0025     		movs	r5, #0
 619 0014 0AE0     		b	.L35
 620              	.LVL81:
 621              	.L37:
 622              	.LBB7:
 222:Display/e-Paper/EPD_2in9.c ****         EPD_SetCursor(0, j);
 223:Display/e-Paper/EPD_2in9.c ****         EPD_SendCommand(WRITE_RAM);
 224:Display/e-Paper/EPD_2in9.c ****         for (UWORD i = 0; i < Width; i++) {
 225:Display/e-Paper/EPD_2in9.c ****             Addr = i + j * Width;
 623              		.loc 1 225 0 discriminator 3
 624 0016 04EB0513 		add	r3, r4, r5, lsl #4
 625              	.LVL82:
 226:Display/e-Paper/EPD_2in9.c ****             EPD_SendData(Image[Addr]);
 626              		.loc 1 226 0 discriminator 3
 627 001a F05C     		ldrb	r0, [r6, r3]	@ zero_extendqisi2
 628 001c FFF7FEFF 		bl	EPD_SendData
 629              	.LVL83:
 224:Display/e-Paper/EPD_2in9.c ****             Addr = i + j * Width;
 630              		.loc 1 224 0 discriminator 3
 631 0020 0134     		adds	r4, r4, #1
 632              	.LVL84:
 633 0022 A4B2     		uxth	r4, r4
ARM GAS  /tmp/cceQyzTj.s 			page 16


 634              	.LVL85:
 635              	.L36:
 224:Display/e-Paper/EPD_2in9.c ****             Addr = i + j * Width;
 636              		.loc 1 224 0 is_stmt 0 discriminator 1
 637 0024 0F2C     		cmp	r4, #15
 638 0026 F6D9     		bls	.L37
 639              	.LBE7:
 221:Display/e-Paper/EPD_2in9.c ****         EPD_SetCursor(0, j);
 640              		.loc 1 221 0 is_stmt 1 discriminator 2
 641 0028 0135     		adds	r5, r5, #1
 642              	.LVL86:
 643 002a ADB2     		uxth	r5, r5
 644              	.LVL87:
 645              	.L35:
 221:Display/e-Paper/EPD_2in9.c ****         EPD_SetCursor(0, j);
 646              		.loc 1 221 0 is_stmt 0 discriminator 1
 647 002c B5F5947F 		cmp	r5, #296
 648 0030 08D2     		bcs	.L40
 222:Display/e-Paper/EPD_2in9.c ****         EPD_SendCommand(WRITE_RAM);
 649              		.loc 1 222 0 is_stmt 1
 650 0032 2946     		mov	r1, r5
 651 0034 0020     		movs	r0, #0
 652 0036 FFF7FEFF 		bl	EPD_SetCursor
 653              	.LVL88:
 223:Display/e-Paper/EPD_2in9.c ****         for (UWORD i = 0; i < Width; i++) {
 654              		.loc 1 223 0
 655 003a 2420     		movs	r0, #36
 656 003c FFF7FEFF 		bl	EPD_SendCommand
 657              	.LVL89:
 658              	.LBB8:
 224:Display/e-Paper/EPD_2in9.c ****             Addr = i + j * Width;
 659              		.loc 1 224 0
 660 0040 0024     		movs	r4, #0
 661 0042 EFE7     		b	.L36
 662              	.LVL90:
 663              	.L40:
 664              	.LBE8:
 665              	.LBE6:
 227:Display/e-Paper/EPD_2in9.c ****         }
 228:Display/e-Paper/EPD_2in9.c ****     }
 229:Display/e-Paper/EPD_2in9.c ****     EPD_TurnOnDisplay();
 666              		.loc 1 229 0
 667 0044 FFF7FEFF 		bl	EPD_TurnOnDisplay
 668              	.LVL91:
 230:Display/e-Paper/EPD_2in9.c **** }
 669              		.loc 1 230 0
 670 0048 70BD     		pop	{r4, r5, r6, pc}
 671              		.cfi_endproc
 672              	.LFE132:
 674              		.section	.text.EPD_Sleep,"ax",%progbits
 675              		.align	1
 676              		.global	EPD_Sleep
 677              		.syntax unified
 678              		.thumb
 679              		.thumb_func
 680              		.fpu fpv4-sp-d16
 682              	EPD_Sleep:
ARM GAS  /tmp/cceQyzTj.s 			page 17


 683              	.LFB133:
 231:Display/e-Paper/EPD_2in9.c **** 
 232:Display/e-Paper/EPD_2in9.c **** /******************************************************************************
 233:Display/e-Paper/EPD_2in9.c **** function :	Enter sleep mode
 234:Display/e-Paper/EPD_2in9.c **** parameter:
 235:Display/e-Paper/EPD_2in9.c **** ******************************************************************************/
 236:Display/e-Paper/EPD_2in9.c **** void EPD_Sleep(void)
 237:Display/e-Paper/EPD_2in9.c **** {
 684              		.loc 1 237 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688 0000 08B5     		push	{r3, lr}
 689              	.LCFI10:
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 3, -8
 692              		.cfi_offset 14, -4
 238:Display/e-Paper/EPD_2in9.c ****     EPD_SendCommand(DEEP_SLEEP_MODE);
 693              		.loc 1 238 0
 694 0002 1020     		movs	r0, #16
 695 0004 FFF7FEFF 		bl	EPD_SendCommand
 696              	.LVL92:
 239:Display/e-Paper/EPD_2in9.c ****     EPD_SendData(0x01);
 697              		.loc 1 239 0
 698 0008 0120     		movs	r0, #1
 699 000a FFF7FEFF 		bl	EPD_SendData
 700              	.LVL93:
 240:Display/e-Paper/EPD_2in9.c ****     // EPD_WaitUntilIdle();
 241:Display/e-Paper/EPD_2in9.c **** }
 701              		.loc 1 241 0
 702 000e 08BD     		pop	{r3, pc}
 703              		.cfi_endproc
 704              	.LFE133:
 706              		.global	lut_partial_update
 707              		.global	lut_full_update
 708              		.comm	display_previous_mode,4,4
 709              		.comm	display_mode,4,4
 710              		.comm	BlackImage,4,4
 711              		.comm	click,4,4
 712              		.comm	current_position,4,4
 713              		.comm	menu_text_usage,12,4
 714              		.comm	mode,4,4
 715              		.comm	action,4,4
 716              		.section	.rodata.lut_full_update,"a",%progbits
 717              		.align	2
 720              	lut_full_update:
 721 0000 02       		.byte	2
 722 0001 02       		.byte	2
 723 0002 01       		.byte	1
 724 0003 11       		.byte	17
 725 0004 12       		.byte	18
 726 0005 12       		.byte	18
 727 0006 22       		.byte	34
 728 0007 22       		.byte	34
 729 0008 66       		.byte	102
 730 0009 69       		.byte	105
 731 000a 69       		.byte	105
ARM GAS  /tmp/cceQyzTj.s 			page 18


 732 000b 59       		.byte	89
 733 000c 58       		.byte	88
 734 000d 99       		.byte	-103
 735 000e 99       		.byte	-103
 736 000f 88       		.byte	-120
 737 0010 00       		.byte	0
 738 0011 00       		.byte	0
 739 0012 00       		.byte	0
 740 0013 00       		.byte	0
 741 0014 F8       		.byte	-8
 742 0015 B4       		.byte	-76
 743 0016 13       		.byte	19
 744 0017 51       		.byte	81
 745 0018 35       		.byte	53
 746 0019 51       		.byte	81
 747 001a 51       		.byte	81
 748 001b 19       		.byte	25
 749 001c 01       		.byte	1
 750 001d 00       		.byte	0
 751              		.section	.rodata.lut_partial_update,"a",%progbits
 752              		.align	2
 755              	lut_partial_update:
 756 0000 10       		.byte	16
 757 0001 18       		.byte	24
 758 0002 18       		.byte	24
 759 0003 08       		.byte	8
 760 0004 18       		.byte	24
 761 0005 18       		.byte	24
 762 0006 08       		.byte	8
 763 0007 00       		.byte	0
 764 0008 00       		.byte	0
 765 0009 00       		.byte	0
 766 000a 00       		.byte	0
 767 000b 00       		.byte	0
 768 000c 00       		.byte	0
 769 000d 00       		.byte	0
 770 000e 00       		.byte	0
 771 000f 00       		.byte	0
 772 0010 00       		.byte	0
 773 0011 00       		.byte	0
 774 0012 00       		.byte	0
 775 0013 00       		.byte	0
 776 0014 13       		.byte	19
 777 0015 14       		.byte	20
 778 0016 44       		.byte	68
 779 0017 12       		.byte	18
 780 0018 00       		.byte	0
 781 0019 00       		.byte	0
 782 001a 00       		.byte	0
 783 001b 00       		.byte	0
 784 001c 00       		.byte	0
 785 001d 00       		.byte	0
 786              		.text
 787              	.Letext0:
 788              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 789              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 790              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/cceQyzTj.s 			page 19


 791              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 792              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 793              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 794              		.file 8 "Display/GUI/../Fonts/fonts.h"
 795              		.file 9 "Display/GUI/GUI_Paint.h"
 796              		.file 10 "Display/e-Paper/ImageData.h"
 797              		.file 11 "/usr/arm-none-eabi/include/sys/lock.h"
 798              		.file 12 "/usr/arm-none-eabi/include/sys/_types.h"
 799              		.file 13 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 800              		.file 14 "/usr/arm-none-eabi/include/sys/reent.h"
 801              		.file 15 "/usr/arm-none-eabi/include/stdlib.h"
 802              		.file 16 "Inc/keyboard.h"
 803              		.file 17 "Display/Text_Mode/text.h"
 804              		.file 18 "Display/Menu/menu.h"
 805              		.file 19 "Display/display.h"
 806              		.file 20 "Display/e-Paper/EPD_2in9.h"
 807              		.file 21 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 808              		.file 22 "Display/Config/DEV_Config.h"
ARM GAS  /tmp/cceQyzTj.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 EPD_2in9.c
     /tmp/cceQyzTj.s:18     .text.EPD_Reset:0000000000000000 $t
     /tmp/cceQyzTj.s:24     .text.EPD_Reset:0000000000000000 EPD_Reset
     /tmp/cceQyzTj.s:72     .text.EPD_SendCommand:0000000000000000 $t
     /tmp/cceQyzTj.s:78     .text.EPD_SendCommand:0000000000000000 EPD_SendCommand
     /tmp/cceQyzTj.s:122    .text.EPD_SendCommand:0000000000000030 $d
     /tmp/cceQyzTj.s:127    .text.EPD_SendData:0000000000000000 $t
     /tmp/cceQyzTj.s:133    .text.EPD_SendData:0000000000000000 EPD_SendData
     /tmp/cceQyzTj.s:177    .text.EPD_SendData:0000000000000030 $d
     /tmp/cceQyzTj.s:182    .text.EPD_SetWindows:0000000000000000 $t
     /tmp/cceQyzTj.s:188    .text.EPD_SetWindows:0000000000000000 EPD_SetWindows
     /tmp/cceQyzTj.s:247    .text.EPD_SetCursor:0000000000000000 $t
     /tmp/cceQyzTj.s:253    .text.EPD_SetCursor:0000000000000000 EPD_SetCursor
     /tmp/cceQyzTj.s:296    .text.EPD_WaitUntilIdle:0000000000000000 $t
     /tmp/cceQyzTj.s:303    .text.EPD_WaitUntilIdle:0000000000000000 EPD_WaitUntilIdle
     /tmp/cceQyzTj.s:334    .text.EPD_WaitUntilIdle:000000000000001c $d
     /tmp/cceQyzTj.s:339    .text.EPD_TurnOnDisplay:0000000000000000 $t
     /tmp/cceQyzTj.s:345    .text.EPD_TurnOnDisplay:0000000000000000 EPD_TurnOnDisplay
     /tmp/cceQyzTj.s:381    .text.EPD_Init:0000000000000000 $t
     /tmp/cceQyzTj.s:388    .text.EPD_Init:0000000000000000 EPD_Init
     /tmp/cceQyzTj.s:501    .text.EPD_Clear:0000000000000000 $t
     /tmp/cceQyzTj.s:508    .text.EPD_Clear:0000000000000000 EPD_Clear
     /tmp/cceQyzTj.s:585    .text.EPD_Display:0000000000000000 $t
     /tmp/cceQyzTj.s:592    .text.EPD_Display:0000000000000000 EPD_Display
     /tmp/cceQyzTj.s:675    .text.EPD_Sleep:0000000000000000 $t
     /tmp/cceQyzTj.s:682    .text.EPD_Sleep:0000000000000000 EPD_Sleep
     /tmp/cceQyzTj.s:755    .rodata.lut_partial_update:0000000000000000 lut_partial_update
     /tmp/cceQyzTj.s:720    .rodata.lut_full_update:0000000000000000 lut_full_update
                            *COM*:0000000000000004 display_previous_mode
                            *COM*:0000000000000004 display_mode
                            *COM*:0000000000000004 BlackImage
                            *COM*:0000000000000004 click
                            *COM*:0000000000000004 current_position
                            *COM*:000000000000000c menu_text_usage
                            *COM*:0000000000000004 mode
                            *COM*:0000000000000004 action
     /tmp/cceQyzTj.s:717    .rodata.lut_full_update:0000000000000000 $d
     /tmp/cceQyzTj.s:752    .rodata.lut_partial_update:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_Delay
DEV_SPI_WriteByte
HAL_GPIO_ReadPin
