ARM GAS  /tmp/ccRt7XoM.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB127:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "EPD_2in9.h"
  27:Src/main.c    **** #include "DEV_Config.h"
  28:Src/main.c    **** #include "GUI_Paint.h"
  29:Src/main.c    **** #include "ImageData.h"
  30:Src/main.c    **** #include <stdlib.h>
  31:Src/main.c    **** /* USER CODE END Includes */
  32:Src/main.c    **** 
ARM GAS  /tmp/ccRt7XoM.s 			page 2


  33:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  34:Src/main.c    **** /* USER CODE BEGIN PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* USER CODE END PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE END PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE END PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** SPI_HandleTypeDef hspi1;
  50:Src/main.c    **** 
  51:Src/main.c    **** UART_HandleTypeDef huart2;
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN PV */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END PV */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  58:Src/main.c    **** void SystemClock_Config(void);
  59:Src/main.c    **** static void MX_GPIO_Init(void);
  60:Src/main.c    **** static void MX_USART2_UART_Init(void);
  61:Src/main.c    **** static void MX_SPI1_Init(void);
  62:Src/main.c    **** /* USER CODE BEGIN PFP */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PFP */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  67:Src/main.c    **** /* USER CODE BEGIN 0 */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END 0 */
  70:Src/main.c    **** 
  71:Src/main.c    **** /**
  72:Src/main.c    ****   * @brief  The application entry point.
  73:Src/main.c    ****   * @retval int
  74:Src/main.c    ****   */
  75:Src/main.c    **** int main(void)
  76:Src/main.c    **** {
  77:Src/main.c    ****   /* USER CODE BEGIN 1 */
  78:Src/main.c    **** 
  79:Src/main.c    ****   /* USER CODE END 1 */
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  84:Src/main.c    ****   HAL_Init();
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* USER CODE BEGIN Init */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE END Init */
  89:Src/main.c    **** 
ARM GAS  /tmp/ccRt7XoM.s 			page 3


  90:Src/main.c    ****   /* Configure the system clock */
  91:Src/main.c    ****   SystemClock_Config();
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE END SysInit */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* Initialize all configured peripherals */
  98:Src/main.c    ****   MX_GPIO_Init();
  99:Src/main.c    ****   MX_USART2_UART_Init();
 100:Src/main.c    ****   MX_SPI1_Init();
 101:Src/main.c    ****   /* USER CODE BEGIN 2 */
 102:Src/main.c    **** 
 103:Src/main.c    ****     if(EPD_Init(lut_full_update) != 0) {
 104:Src/main.c    ****         printf("e-Paper init failed\r\n");
 105:Src/main.c    ****     }
 106:Src/main.c    ****     EPD_Clear();
 107:Src/main.c    ****     DEV_Delay_ms(500);
 108:Src/main.c    **** 
 109:Src/main.c    ****     //Create a new image cache
 110:Src/main.c    ****     UBYTE *BlackImage;
 111:Src/main.c    ****     UWORD Imagesize = ((EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1)) * EPD_HEIGHT;
 112:Src/main.c    ****     if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 113:Src/main.c    ****         printf("Failed to apply for black memory...\r\n");
 114:Src/main.c    ****         return -1;
 115:Src/main.c    ****     }
 116:Src/main.c    ****     printf("Paint_NewImage\r\n");
 117:Src/main.c    ****     Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE);
 118:Src/main.c    ****     Paint_SelectImage(BlackImage);
 119:Src/main.c    ****     Paint_Clear(WHITE);
 120:Src/main.c    **** 
 121:Src/main.c    **** #if 1
 122:Src/main.c    ****     /*show image for array*/
 123:Src/main.c    ****     printf("show image for array\r\n");
 124:Src/main.c    ****     Paint_SelectImage(BlackImage);
 125:Src/main.c    ****     Paint_Clear(WHITE);
 126:Src/main.c    ****     Paint_DrawBitMap(gImage_2in9);
 127:Src/main.c    **** 
 128:Src/main.c    ****     EPD_Display(BlackImage);
 129:Src/main.c    ****     DEV_Delay_ms(2000);
 130:Src/main.c    **** 
 131:Src/main.c    ****     Paint_Clear(WHITE);
 132:Src/main.c    ****     EPD_Display(BlackImage);
 133:Src/main.c    **** #endif
 134:Src/main.c    **** 
 135:Src/main.c    **** #if 0   // Drawing on the image
 136:Src/main.c    ****     //1.Select Image
 137:Src/main.c    ****     printf("SelectImage:BlackImage\r\n");
 138:Src/main.c    ****     Paint_SelectImage(BlackImage);
 139:Src/main.c    ****     Paint_Clear(WHITE);
 140:Src/main.c    **** 
 141:Src/main.c    ****     // 2.Drawing on the image
 142:Src/main.c    ****     printf("Drawing:BlackImage\r\n");
 143:Src/main.c    ****     Paint_DrawPoint(10, 80, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 144:Src/main.c    ****     Paint_DrawPoint(10, 90, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 145:Src/main.c    ****     Paint_DrawPoint(10, 100, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 146:Src/main.c    ****     Paint_DrawLine(20, 70, 70, 120, BLACK, LINE_STYLE_SOLID, DOT_PIXEL_1X1);
ARM GAS  /tmp/ccRt7XoM.s 			page 4


 147:Src/main.c    ****     Paint_DrawLine(70, 70, 20, 120, BLACK, LINE_STYLE_SOLID, DOT_PIXEL_1X1);
 148:Src/main.c    ****     Paint_DrawRectangle(20, 70, 70, 120, BLACK, DRAW_FILL_EMPTY, DOT_PIXEL_1X1);
 149:Src/main.c    ****     Paint_DrawRectangle(80, 70, 130, 120, BLACK, DRAW_FILL_FULL, DOT_PIXEL_1X1);
 150:Src/main.c    ****     Paint_DrawCircle(45, 95, 20, BLACK, DRAW_FILL_EMPTY, DOT_PIXEL_1X1);
 151:Src/main.c    ****     Paint_DrawCircle(105, 95, 20, WHITE, DRAW_FILL_FULL, DOT_PIXEL_1X1);
 152:Src/main.c    ****     Paint_DrawLine(85, 95, 125, 95, BLACK, LINE_STYLE_DOTTED, DOT_PIXEL_1X1);
 153:Src/main.c    ****     Paint_DrawLine(105, 75, 105, 115, BLACK, LINE_STYLE_DOTTED, DOT_PIXEL_1X1);
 154:Src/main.c    ****     Paint_DrawString_EN(10, 0, "waveshare", &Font16, BLACK, WHITE);
 155:Src/main.c    ****     Paint_DrawString_EN(10, 20, "hello world", &Font12, WHITE, BLACK);
 156:Src/main.c    ****     Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
 157:Src/main.c    ****     Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
 158:Src/main.c    **** 
 159:Src/main.c    ****     printf("EPD_Display\r\n");
 160:Src/main.c    ****     EPD_Display(BlackImage);
 161:Src/main.c    ****     DEV_Delay_ms(2000);
 162:Src/main.c    **** #endif
 163:Src/main.c    **** 
 164:Src/main.c    **** #if 0   //Partial refresh, example shows time
 165:Src/main.c    ****     if(EPD_Init(lut_partial_update) != 0) {
 166:Src/main.c    ****         printf("e-Paper init failed\r\n");
 167:Src/main.c    ****     }
 168:Src/main.c    **** 		Paint_SelectImage(BlackImage);
 169:Src/main.c    ****     PAINT_TIME sPaint_time;
 170:Src/main.c    ****     sPaint_time.Hour = 12;
 171:Src/main.c    ****     sPaint_time.Min = 34;
 172:Src/main.c    ****     sPaint_time.Sec = 56;
 173:Src/main.c    ****     for (;;) {
 174:Src/main.c    ****         sPaint_time.Sec = sPaint_time.Sec + 1;
 175:Src/main.c    ****         if (sPaint_time.Sec == 60) {
 176:Src/main.c    ****             sPaint_time.Min = sPaint_time.Min + 1;
 177:Src/main.c    ****             sPaint_time.Sec = 0;
 178:Src/main.c    ****             if (sPaint_time.Min == 60) {
 179:Src/main.c    ****                 sPaint_time.Hour =  sPaint_time.Hour + 1;
 180:Src/main.c    ****                 sPaint_time.Min = 0;
 181:Src/main.c    ****                 if (sPaint_time.Hour == 24) {
 182:Src/main.c    ****                     sPaint_time.Hour = 0;
 183:Src/main.c    ****                     sPaint_time.Min = 0;
 184:Src/main.c    ****                     sPaint_time.Sec = 0;
 185:Src/main.c    ****                 }
 186:Src/main.c    ****             }
 187:Src/main.c    ****         }
 188:Src/main.c    ****         Paint_ClearWindows(15, 65, 15 + Font20.Width * 7, 65 + Font20.Height, WHITE);
 189:Src/main.c    ****         Paint_DrawTime(15, 65, &sPaint_time, &Font20, WHITE, BLACK);
 190:Src/main.c    **** 
 191:Src/main.c    **** 				EPD_Display(BlackImage);
 192:Src/main.c    ****         DEV_Delay_ms(500);//Analog clock 1s
 193:Src/main.c    ****     }
 194:Src/main.c    **** 
 195:Src/main.c    **** #endif
 196:Src/main.c    **** 
 197:Src/main.c    **** #if 0
 198:Src/main.c    ****     printf("Goto Sleep mode...\r\n");
 199:Src/main.c    ****     EPD_Sleep();
 200:Src/main.c    ****     free(BlackImage);
 201:Src/main.c    ****     BlackImage = NULL;
 202:Src/main.c    **** #endif
 203:Src/main.c    **** 
ARM GAS  /tmp/ccRt7XoM.s 			page 5


 204:Src/main.c    ****   /* USER CODE END 2 */
 205:Src/main.c    **** 
 206:Src/main.c    ****   /* Infinite loop */
 207:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 208:Src/main.c    ****   while (1)
 209:Src/main.c    ****   {
 210:Src/main.c    ****     /* USER CODE END WHILE */
 211:Src/main.c    **** 
 212:Src/main.c    ****     /* USER CODE BEGIN 3 */
 213:Src/main.c    ****   }
 214:Src/main.c    ****   /* USER CODE END 3 */
 215:Src/main.c    **** }
 216:Src/main.c    **** 
 217:Src/main.c    **** /**
 218:Src/main.c    ****   * @brief System Clock Configuration
 219:Src/main.c    ****   * @retval None
 220:Src/main.c    ****   */
 221:Src/main.c    **** void SystemClock_Config(void)
 222:Src/main.c    **** {
 223:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 224:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 225:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 226:Src/main.c    **** 
 227:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 228:Src/main.c    ****   */
 229:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 230:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 231:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 232:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 233:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 234:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 1;
 235:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 10;
 236:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 237:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 238:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 239:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 240:Src/main.c    ****   {
 241:Src/main.c    ****     Error_Handler();
 242:Src/main.c    ****   }
 243:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 244:Src/main.c    ****   */
 245:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 246:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 247:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 248:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 249:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 250:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 251:Src/main.c    **** 
 252:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 253:Src/main.c    ****   {
 254:Src/main.c    ****     Error_Handler();
 255:Src/main.c    ****   }
 256:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 257:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 258:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 259:Src/main.c    ****   {
 260:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/ccRt7XoM.s 			page 6


 261:Src/main.c    ****   }
 262:Src/main.c    ****   /** Configure the main internal regulator output voltage
 263:Src/main.c    ****   */
 264:Src/main.c    ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 265:Src/main.c    ****   {
 266:Src/main.c    ****     Error_Handler();
 267:Src/main.c    ****   }
 268:Src/main.c    **** }
 269:Src/main.c    **** 
 270:Src/main.c    **** /**
 271:Src/main.c    ****   * @brief SPI1 Initialization Function
 272:Src/main.c    ****   * @param None
 273:Src/main.c    ****   * @retval None
 274:Src/main.c    ****   */
 275:Src/main.c    **** static void MX_SPI1_Init(void)
 276:Src/main.c    **** {
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 279:Src/main.c    **** 
 280:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 281:Src/main.c    **** 
 282:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 283:Src/main.c    **** 
 284:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 285:Src/main.c    ****   /* SPI1 parameter configuration*/
 286:Src/main.c    ****   hspi1.Instance = SPI1;
 287:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 288:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 289:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 290:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 291:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 292:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 293:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 294:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 295:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 296:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 297:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 298:Src/main.c    ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 299:Src/main.c    ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 300:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 301:Src/main.c    ****   {
 302:Src/main.c    ****     Error_Handler();
 303:Src/main.c    ****   }
 304:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 305:Src/main.c    **** 
 306:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 307:Src/main.c    **** 
 308:Src/main.c    **** }
 309:Src/main.c    **** 
 310:Src/main.c    **** /**
 311:Src/main.c    ****   * @brief USART2 Initialization Function
 312:Src/main.c    ****   * @param None
 313:Src/main.c    ****   * @retval None
 314:Src/main.c    ****   */
 315:Src/main.c    **** static void MX_USART2_UART_Init(void)
 316:Src/main.c    **** {
 317:Src/main.c    **** 
ARM GAS  /tmp/ccRt7XoM.s 			page 7


 318:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 319:Src/main.c    **** 
 320:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 321:Src/main.c    **** 
 322:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 323:Src/main.c    **** 
 324:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 325:Src/main.c    ****   huart2.Instance = USART2;
 326:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 327:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 328:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 329:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 330:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 331:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 332:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 333:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 334:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 335:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 336:Src/main.c    ****   {
 337:Src/main.c    ****     Error_Handler();
 338:Src/main.c    ****   }
 339:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 340:Src/main.c    **** 
 341:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 342:Src/main.c    **** 
 343:Src/main.c    **** }
 344:Src/main.c    **** 
 345:Src/main.c    **** /**
 346:Src/main.c    ****   * @brief GPIO Initialization Function
 347:Src/main.c    ****   * @param None
 348:Src/main.c    ****   * @retval None
 349:Src/main.c    ****   */
 350:Src/main.c    **** static void MX_GPIO_Init(void)
 351:Src/main.c    **** {
  27              		.loc 1 351 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 352:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 352 0
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
  48              	.LBB2:
ARM GAS  /tmp/ccRt7XoM.s 			page 8


 353:Src/main.c    **** 
 354:Src/main.c    ****   /* GPIO Ports Clock Enable */
 355:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 355 0
  50 0010 2D4B     		ldr	r3, .L3
  51 0012 DA6C     		ldr	r2, [r3, #76]
  52 0014 42F00402 		orr	r2, r2, #4
  53 0018 DA64     		str	r2, [r3, #76]
  54 001a DA6C     		ldr	r2, [r3, #76]
  55 001c 02F00402 		and	r2, r2, #4
  56 0020 0192     		str	r2, [sp, #4]
  57 0022 019A     		ldr	r2, [sp, #4]
  58              	.LBE2:
  59              	.LBB3:
 356:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  60              		.loc 1 356 0
  61 0024 DA6C     		ldr	r2, [r3, #76]
  62 0026 42F08002 		orr	r2, r2, #128
  63 002a DA64     		str	r2, [r3, #76]
  64 002c DA6C     		ldr	r2, [r3, #76]
  65 002e 02F08002 		and	r2, r2, #128
  66 0032 0292     		str	r2, [sp, #8]
  67 0034 029A     		ldr	r2, [sp, #8]
  68              	.LBE3:
  69              	.LBB4:
 357:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  70              		.loc 1 357 0
  71 0036 DA6C     		ldr	r2, [r3, #76]
  72 0038 42F00102 		orr	r2, r2, #1
  73 003c DA64     		str	r2, [r3, #76]
  74 003e DA6C     		ldr	r2, [r3, #76]
  75 0040 02F00102 		and	r2, r2, #1
  76 0044 0392     		str	r2, [sp, #12]
  77 0046 039A     		ldr	r2, [sp, #12]
  78              	.LBE4:
  79              	.LBB5:
 358:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  80              		.loc 1 358 0
  81 0048 DA6C     		ldr	r2, [r3, #76]
  82 004a 42F00202 		orr	r2, r2, #2
  83 004e DA64     		str	r2, [r3, #76]
  84 0050 DB6C     		ldr	r3, [r3, #76]
  85 0052 03F00203 		and	r3, r3, #2
  86 0056 0493     		str	r3, [sp, #16]
  87 0058 049B     		ldr	r3, [sp, #16]
  88              	.LBE5:
 359:Src/main.c    **** 
 360:Src/main.c    ****   /*Configure GPIO pin Output Level */
 361:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|RST_Pin|DC_Pin, GPIO_PIN_RESET);
  89              		.loc 1 361 0
  90 005a 2246     		mov	r2, r4
  91 005c 4FF4A461 		mov	r1, #1312
  92 0060 4FF09040 		mov	r0, #1207959552
  93 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL0:
 362:Src/main.c    **** 
 363:Src/main.c    ****   /*Configure GPIO pin Output Level */
ARM GAS  /tmp/ccRt7XoM.s 			page 9


 364:Src/main.c    ****   HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  95              		.loc 1 364 0
  96 0068 184D     		ldr	r5, .L3+4
  97 006a 2246     		mov	r2, r4
  98 006c 1021     		movs	r1, #16
  99 006e 2846     		mov	r0, r5
 100 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL1:
 365:Src/main.c    **** 
 366:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 367:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 102              		.loc 1 367 0
 103 0074 4FF40053 		mov	r3, #8192
 104 0078 0593     		str	r3, [sp, #20]
 368:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 105              		.loc 1 368 0
 106 007a 154B     		ldr	r3, .L3+8
 107 007c 0693     		str	r3, [sp, #24]
 369:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 108              		.loc 1 369 0
 109 007e 0794     		str	r4, [sp, #28]
 370:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 110              		.loc 1 370 0
 111 0080 05A9     		add	r1, sp, #20
 112 0082 1448     		ldr	r0, .L3+12
 113 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 114              	.LVL2:
 371:Src/main.c    **** 
 372:Src/main.c    ****   /*Configure GPIO pins : LD2_Pin RST_Pin DC_Pin */
 373:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin|RST_Pin|DC_Pin;
 115              		.loc 1 373 0
 116 0088 4FF4A463 		mov	r3, #1312
 117 008c 0593     		str	r3, [sp, #20]
 374:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 374 0
 119 008e 0126     		movs	r6, #1
 120 0090 0696     		str	r6, [sp, #24]
 375:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 121              		.loc 1 375 0
 122 0092 0794     		str	r4, [sp, #28]
 376:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 123              		.loc 1 376 0
 124 0094 0894     		str	r4, [sp, #32]
 377:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 125              		.loc 1 377 0
 126 0096 05A9     		add	r1, sp, #20
 127 0098 4FF09040 		mov	r0, #1207959552
 128 009c FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL3:
 378:Src/main.c    **** 
 379:Src/main.c    ****   /*Configure GPIO pin : BUSY_Pin */
 380:Src/main.c    ****   GPIO_InitStruct.Pin = BUSY_Pin;
 130              		.loc 1 380 0
 131 00a0 4FF48063 		mov	r3, #1024
 132 00a4 0593     		str	r3, [sp, #20]
 381:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 133              		.loc 1 381 0
ARM GAS  /tmp/ccRt7XoM.s 			page 10


 134 00a6 0694     		str	r4, [sp, #24]
 382:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 135              		.loc 1 382 0
 136 00a8 0794     		str	r4, [sp, #28]
 383:Src/main.c    ****   HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 137              		.loc 1 383 0
 138 00aa 05A9     		add	r1, sp, #20
 139 00ac 2846     		mov	r0, r5
 140 00ae FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL4:
 384:Src/main.c    **** 
 385:Src/main.c    ****   /*Configure GPIO pin : SPI_CS_Pin */
 386:Src/main.c    ****   GPIO_InitStruct.Pin = SPI_CS_Pin;
 142              		.loc 1 386 0
 143 00b2 1023     		movs	r3, #16
 144 00b4 0593     		str	r3, [sp, #20]
 387:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 145              		.loc 1 387 0
 146 00b6 0696     		str	r6, [sp, #24]
 388:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 147              		.loc 1 388 0
 148 00b8 0794     		str	r4, [sp, #28]
 389:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 149              		.loc 1 389 0
 150 00ba 0894     		str	r4, [sp, #32]
 390:Src/main.c    ****   HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 151              		.loc 1 390 0
 152 00bc 05A9     		add	r1, sp, #20
 153 00be 2846     		mov	r0, r5
 154 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 155              	.LVL5:
 391:Src/main.c    **** 
 392:Src/main.c    **** }
 156              		.loc 1 392 0
 157 00c4 0AB0     		add	sp, sp, #40
 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 16
 160              		@ sp needed
 161 00c6 70BD     		pop	{r4, r5, r6, pc}
 162              	.L4:
 163              		.align	2
 164              	.L3:
 165 00c8 00100240 		.word	1073876992
 166 00cc 00040048 		.word	1207960576
 167 00d0 00002110 		.word	270598144
 168 00d4 00080048 		.word	1207961600
 169              		.cfi_endproc
 170              	.LFE127:
 172              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 173              		.align	1
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	MX_USART2_UART_Init:
 180              	.LFB126:
 316:Src/main.c    **** 
ARM GAS  /tmp/ccRt7XoM.s 			page 11


 181              		.loc 1 316 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185 0000 08B5     		push	{r3, lr}
 186              	.LCFI3:
 187              		.cfi_def_cfa_offset 8
 188              		.cfi_offset 3, -8
 189              		.cfi_offset 14, -4
 325:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 190              		.loc 1 325 0
 191 0002 0948     		ldr	r0, .L7
 192 0004 094B     		ldr	r3, .L7+4
 193 0006 0360     		str	r3, [r0]
 326:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 194              		.loc 1 326 0
 195 0008 4FF4E133 		mov	r3, #115200
 196 000c 4360     		str	r3, [r0, #4]
 327:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 197              		.loc 1 327 0
 198 000e 0023     		movs	r3, #0
 199 0010 8360     		str	r3, [r0, #8]
 328:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 200              		.loc 1 328 0
 201 0012 C360     		str	r3, [r0, #12]
 329:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 202              		.loc 1 329 0
 203 0014 0361     		str	r3, [r0, #16]
 330:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 204              		.loc 1 330 0
 205 0016 0C22     		movs	r2, #12
 206 0018 4261     		str	r2, [r0, #20]
 331:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 207              		.loc 1 331 0
 208 001a 8361     		str	r3, [r0, #24]
 332:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 209              		.loc 1 332 0
 210 001c C361     		str	r3, [r0, #28]
 333:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 211              		.loc 1 333 0
 212 001e 0362     		str	r3, [r0, #32]
 334:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 213              		.loc 1 334 0
 214 0020 4362     		str	r3, [r0, #36]
 335:Src/main.c    ****   {
 215              		.loc 1 335 0
 216 0022 FFF7FEFF 		bl	HAL_UART_Init
 217              	.LVL6:
 343:Src/main.c    **** 
 218              		.loc 1 343 0
 219 0026 08BD     		pop	{r3, pc}
 220              	.L8:
 221              		.align	2
 222              	.L7:
 223 0028 00000000 		.word	huart2
 224 002c 00440040 		.word	1073759232
 225              		.cfi_endproc
ARM GAS  /tmp/ccRt7XoM.s 			page 12


 226              	.LFE126:
 228              		.section	.text.MX_SPI1_Init,"ax",%progbits
 229              		.align	1
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 233              		.fpu fpv4-sp-d16
 235              	MX_SPI1_Init:
 236              	.LFB125:
 276:Src/main.c    **** 
 237              		.loc 1 276 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241 0000 08B5     		push	{r3, lr}
 242              	.LCFI4:
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 3, -8
 245              		.cfi_offset 14, -4
 286:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 246              		.loc 1 286 0
 247 0002 0E48     		ldr	r0, .L11
 248 0004 0E4B     		ldr	r3, .L11+4
 249 0006 0360     		str	r3, [r0]
 287:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 250              		.loc 1 287 0
 251 0008 4FF48273 		mov	r3, #260
 252 000c 4360     		str	r3, [r0, #4]
 288:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 253              		.loc 1 288 0
 254 000e 0023     		movs	r3, #0
 255 0010 8360     		str	r3, [r0, #8]
 289:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 256              		.loc 1 289 0
 257 0012 4FF4E062 		mov	r2, #1792
 258 0016 C260     		str	r2, [r0, #12]
 290:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 259              		.loc 1 290 0
 260 0018 0361     		str	r3, [r0, #16]
 291:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 261              		.loc 1 291 0
 262 001a 4361     		str	r3, [r0, #20]
 292:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 263              		.loc 1 292 0
 264 001c 4FF40072 		mov	r2, #512
 265 0020 8261     		str	r2, [r0, #24]
 293:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 266              		.loc 1 293 0
 267 0022 2822     		movs	r2, #40
 268 0024 C261     		str	r2, [r0, #28]
 294:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 269              		.loc 1 294 0
 270 0026 0362     		str	r3, [r0, #32]
 295:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 271              		.loc 1 295 0
 272 0028 4362     		str	r3, [r0, #36]
 296:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
ARM GAS  /tmp/ccRt7XoM.s 			page 13


 273              		.loc 1 296 0
 274 002a 8362     		str	r3, [r0, #40]
 297:Src/main.c    ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 275              		.loc 1 297 0
 276 002c 0722     		movs	r2, #7
 277 002e C262     		str	r2, [r0, #44]
 298:Src/main.c    ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 278              		.loc 1 298 0
 279 0030 0363     		str	r3, [r0, #48]
 299:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 280              		.loc 1 299 0
 281 0032 0823     		movs	r3, #8
 282 0034 4363     		str	r3, [r0, #52]
 300:Src/main.c    ****   {
 283              		.loc 1 300 0
 284 0036 FFF7FEFF 		bl	HAL_SPI_Init
 285              	.LVL7:
 308:Src/main.c    **** 
 286              		.loc 1 308 0
 287 003a 08BD     		pop	{r3, pc}
 288              	.L12:
 289              		.align	2
 290              	.L11:
 291 003c 00000000 		.word	hspi1
 292 0040 00300140 		.word	1073819648
 293              		.cfi_endproc
 294              	.LFE125:
 296              		.section	.text.SystemClock_Config,"ax",%progbits
 297              		.align	1
 298              		.global	SystemClock_Config
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu fpv4-sp-d16
 304              	SystemClock_Config:
 305              	.LFB124:
 222:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 306              		.loc 1 222 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 224
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310 0000 30B5     		push	{r4, r5, lr}
 311              	.LCFI5:
 312              		.cfi_def_cfa_offset 12
 313              		.cfi_offset 4, -12
 314              		.cfi_offset 5, -8
 315              		.cfi_offset 14, -4
 316 0002 B9B0     		sub	sp, sp, #228
 317              	.LCFI6:
 318              		.cfi_def_cfa_offset 240
 223:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 319              		.loc 1 223 0
 320 0004 2422     		movs	r2, #36
 321 0006 0021     		movs	r1, #0
 322 0008 28A8     		add	r0, sp, #160
 323 000a FFF7FEFF 		bl	memset
 324              	.LVL8:
ARM GAS  /tmp/ccRt7XoM.s 			page 14


 224:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 325              		.loc 1 224 0
 326 000e 0024     		movs	r4, #0
 327 0010 2294     		str	r4, [sp, #136]
 328 0012 2394     		str	r4, [sp, #140]
 329 0014 2494     		str	r4, [sp, #144]
 330 0016 2594     		str	r4, [sp, #148]
 331 0018 2694     		str	r4, [sp, #152]
 225:Src/main.c    **** 
 332              		.loc 1 225 0
 333 001a 8822     		movs	r2, #136
 334 001c 2146     		mov	r1, r4
 335 001e 6846     		mov	r0, sp
 336 0020 FFF7FEFF 		bl	memset
 337              	.LVL9:
 229:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 338              		.loc 1 229 0
 339 0024 0225     		movs	r5, #2
 340 0026 2795     		str	r5, [sp, #156]
 230:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 341              		.loc 1 230 0
 342 0028 4FF48073 		mov	r3, #256
 343 002c 2A93     		str	r3, [sp, #168]
 231:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 344              		.loc 1 231 0
 345 002e 1023     		movs	r3, #16
 346 0030 2B93     		str	r3, [sp, #172]
 232:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 347              		.loc 1 232 0
 348 0032 3195     		str	r5, [sp, #196]
 233:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 1;
 349              		.loc 1 233 0
 350 0034 3295     		str	r5, [sp, #200]
 234:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 10;
 351              		.loc 1 234 0
 352 0036 0123     		movs	r3, #1
 353 0038 3393     		str	r3, [sp, #204]
 235:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 354              		.loc 1 235 0
 355 003a 0A23     		movs	r3, #10
 356 003c 3493     		str	r3, [sp, #208]
 236:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 357              		.loc 1 236 0
 358 003e 0723     		movs	r3, #7
 359 0040 3593     		str	r3, [sp, #212]
 237:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 360              		.loc 1 237 0
 361 0042 3695     		str	r5, [sp, #216]
 238:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 362              		.loc 1 238 0
 363 0044 3795     		str	r5, [sp, #220]
 239:Src/main.c    ****   {
 364              		.loc 1 239 0
 365 0046 27A8     		add	r0, sp, #156
 366 0048 FFF7FEFF 		bl	HAL_RCC_OscConfig
 367              	.LVL10:
 245:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/ccRt7XoM.s 			page 15


 368              		.loc 1 245 0
 369 004c 0F23     		movs	r3, #15
 370 004e 2293     		str	r3, [sp, #136]
 247:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 371              		.loc 1 247 0
 372 0050 0323     		movs	r3, #3
 373 0052 2393     		str	r3, [sp, #140]
 248:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 374              		.loc 1 248 0
 375 0054 2494     		str	r4, [sp, #144]
 249:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 376              		.loc 1 249 0
 377 0056 2594     		str	r4, [sp, #148]
 250:Src/main.c    **** 
 378              		.loc 1 250 0
 379 0058 2694     		str	r4, [sp, #152]
 252:Src/main.c    ****   {
 380              		.loc 1 252 0
 381 005a 0421     		movs	r1, #4
 382 005c 22A8     		add	r0, sp, #136
 383 005e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 384              	.LVL11:
 256:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 385              		.loc 1 256 0
 386 0062 0095     		str	r5, [sp]
 257:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 387              		.loc 1 257 0
 388 0064 0F94     		str	r4, [sp, #60]
 258:Src/main.c    ****   {
 389              		.loc 1 258 0
 390 0066 6846     		mov	r0, sp
 391 0068 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 392              	.LVL12:
 264:Src/main.c    ****   {
 393              		.loc 1 264 0
 394 006c 4FF40070 		mov	r0, #512
 395 0070 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 396              	.LVL13:
 268:Src/main.c    **** 
 397              		.loc 1 268 0
 398 0074 39B0     		add	sp, sp, #228
 399              	.LCFI7:
 400              		.cfi_def_cfa_offset 12
 401              		@ sp needed
 402 0076 30BD     		pop	{r4, r5, pc}
 403              		.cfi_endproc
 404              	.LFE124:
 406              		.section	.text.main,"ax",%progbits
 407              		.align	1
 408              		.global	main
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu fpv4-sp-d16
 414              	main:
 415              	.LFB123:
  76:Src/main.c    ****   /* USER CODE BEGIN 1 */
ARM GAS  /tmp/ccRt7XoM.s 			page 16


 416              		.loc 1 76 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420 0000 30B5     		push	{r4, r5, lr}
 421              	.LCFI8:
 422              		.cfi_def_cfa_offset 12
 423              		.cfi_offset 4, -12
 424              		.cfi_offset 5, -8
 425              		.cfi_offset 14, -4
 426 0002 83B0     		sub	sp, sp, #12
 427              	.LCFI9:
 428              		.cfi_def_cfa_offset 24
  84:Src/main.c    **** 
 429              		.loc 1 84 0
 430 0004 FFF7FEFF 		bl	HAL_Init
 431              	.LVL14:
  91:Src/main.c    **** 
 432              		.loc 1 91 0
 433 0008 FFF7FEFF 		bl	SystemClock_Config
 434              	.LVL15:
  98:Src/main.c    ****   MX_USART2_UART_Init();
 435              		.loc 1 98 0
 436 000c FFF7FEFF 		bl	MX_GPIO_Init
 437              	.LVL16:
  99:Src/main.c    ****   MX_SPI1_Init();
 438              		.loc 1 99 0
 439 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 440              	.LVL17:
 100:Src/main.c    ****   /* USER CODE BEGIN 2 */
 441              		.loc 1 100 0
 442 0014 FFF7FEFF 		bl	MX_SPI1_Init
 443              	.LVL18:
 103:Src/main.c    ****         printf("e-Paper init failed\r\n");
 444              		.loc 1 103 0
 445 0018 2348     		ldr	r0, .L23
 446 001a FFF7FEFF 		bl	EPD_Init
 447              	.LVL19:
 448 001e C0BB     		cbnz	r0, .L22
 449              	.L16:
 106:Src/main.c    ****     DEV_Delay_ms(500);
 450              		.loc 1 106 0
 451 0020 FFF7FEFF 		bl	EPD_Clear
 452              	.LVL20:
 107:Src/main.c    **** 
 453              		.loc 1 107 0
 454 0024 4FF4FA70 		mov	r0, #500
 455 0028 FFF7FEFF 		bl	HAL_Delay
 456              	.LVL21:
 112:Src/main.c    ****         printf("Failed to apply for black memory...\r\n");
 457              		.loc 1 112 0
 458 002c 4FF49450 		mov	r0, #4736
 459 0030 FFF7FEFF 		bl	malloc
 460              	.LVL22:
 461 0034 0446     		mov	r4, r0
 462 0036 80B3     		cbz	r0, .L20
 116:Src/main.c    ****     Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE);
ARM GAS  /tmp/ccRt7XoM.s 			page 17


 463              		.loc 1 116 0
 464 0038 1C48     		ldr	r0, .L23+4
 465              	.LVL23:
 466 003a FFF7FEFF 		bl	puts
 467              	.LVL24:
 117:Src/main.c    ****     Paint_SelectImage(BlackImage);
 468              		.loc 1 117 0
 469 003e FF25     		movs	r5, #255
 470 0040 0095     		str	r5, [sp]
 471 0042 4FF48773 		mov	r3, #270
 472 0046 4FF49472 		mov	r2, #296
 473 004a 8021     		movs	r1, #128
 474 004c 2046     		mov	r0, r4
 475 004e FFF7FEFF 		bl	Paint_NewImage
 476              	.LVL25:
 118:Src/main.c    ****     Paint_Clear(WHITE);
 477              		.loc 1 118 0
 478 0052 2046     		mov	r0, r4
 479 0054 FFF7FEFF 		bl	Paint_SelectImage
 480              	.LVL26:
 119:Src/main.c    **** 
 481              		.loc 1 119 0
 482 0058 2846     		mov	r0, r5
 483 005a FFF7FEFF 		bl	Paint_Clear
 484              	.LVL27:
 123:Src/main.c    ****     Paint_SelectImage(BlackImage);
 485              		.loc 1 123 0
 486 005e 1448     		ldr	r0, .L23+8
 487 0060 FFF7FEFF 		bl	puts
 488              	.LVL28:
 124:Src/main.c    ****     Paint_Clear(WHITE);
 489              		.loc 1 124 0
 490 0064 2046     		mov	r0, r4
 491 0066 FFF7FEFF 		bl	Paint_SelectImage
 492              	.LVL29:
 125:Src/main.c    ****     Paint_DrawBitMap(gImage_2in9);
 493              		.loc 1 125 0
 494 006a 2846     		mov	r0, r5
 495 006c FFF7FEFF 		bl	Paint_Clear
 496              	.LVL30:
 126:Src/main.c    **** 
 497              		.loc 1 126 0
 498 0070 1048     		ldr	r0, .L23+12
 499 0072 FFF7FEFF 		bl	Paint_DrawBitMap
 500              	.LVL31:
 128:Src/main.c    ****     DEV_Delay_ms(2000);
 501              		.loc 1 128 0
 502 0076 2046     		mov	r0, r4
 503 0078 FFF7FEFF 		bl	EPD_Display
 504              	.LVL32:
 129:Src/main.c    **** 
 505              		.loc 1 129 0
 506 007c 4FF4FA60 		mov	r0, #2000
 507 0080 FFF7FEFF 		bl	HAL_Delay
 508              	.LVL33:
 131:Src/main.c    ****     EPD_Display(BlackImage);
 509              		.loc 1 131 0
ARM GAS  /tmp/ccRt7XoM.s 			page 18


 510 0084 2846     		mov	r0, r5
 511 0086 FFF7FEFF 		bl	Paint_Clear
 512              	.LVL34:
 132:Src/main.c    **** #endif
 513              		.loc 1 132 0
 514 008a 2046     		mov	r0, r4
 515 008c FFF7FEFF 		bl	EPD_Display
 516              	.LVL35:
 517              	.L18:
 518 0090 FEE7     		b	.L18
 519              	.LVL36:
 520              	.L22:
 521              	.LBB6:
 104:Src/main.c    ****     }
 522              		.loc 1 104 0
 523 0092 0948     		ldr	r0, .L23+16
 524 0094 FFF7FEFF 		bl	puts
 525              	.LVL37:
 526 0098 C2E7     		b	.L16
 527              	.LVL38:
 528              	.L20:
 529              	.LBE6:
 530              	.LBB7:
 113:Src/main.c    ****         return -1;
 531              		.loc 1 113 0
 532 009a 0848     		ldr	r0, .L23+20
 533              	.LVL39:
 534 009c FFF7FEFF 		bl	puts
 535              	.LVL40:
 536              	.LBE7:
 215:Src/main.c    **** 
 537              		.loc 1 215 0
 538 00a0 4FF0FF30 		mov	r0, #-1
 539 00a4 03B0     		add	sp, sp, #12
 540              	.LCFI10:
 541              		.cfi_def_cfa_offset 12
 542              		@ sp needed
 543 00a6 30BD     		pop	{r4, r5, pc}
 544              	.LVL41:
 545              	.L24:
 546              		.align	2
 547              	.L23:
 548 00a8 00000000 		.word	lut_full_update
 549 00ac 40000000 		.word	.LC2
 550 00b0 50000000 		.word	.LC3
 551 00b4 00000000 		.word	gImage_2in9
 552 00b8 00000000 		.word	.LC0
 553 00bc 18000000 		.word	.LC1
 554              		.cfi_endproc
 555              	.LFE123:
 557              		.section	.text.Error_Handler,"ax",%progbits
 558              		.align	1
 559              		.global	Error_Handler
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccRt7XoM.s 			page 19


 565              	Error_Handler:
 566              	.LFB128:
 393:Src/main.c    **** 
 394:Src/main.c    **** /* USER CODE BEGIN 4 */
 395:Src/main.c    **** 
 396:Src/main.c    **** /* USER CODE END 4 */
 397:Src/main.c    **** 
 398:Src/main.c    **** /**
 399:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 400:Src/main.c    ****   * @retval None
 401:Src/main.c    ****   */
 402:Src/main.c    **** void Error_Handler(void)
 403:Src/main.c    **** {
 567              		.loc 1 403 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 404:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 405:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 406:Src/main.c    **** 
 407:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 408:Src/main.c    **** }
 572              		.loc 1 408 0
 573 0000 7047     		bx	lr
 574              		.cfi_endproc
 575              	.LFE128:
 577              		.comm	huart2,120,4
 578              		.comm	hspi1,100,4
 579              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 580              		.align	2
 581              	.LC0:
 582 0000 652D5061 		.ascii	"e-Paper init failed\015\000"
 582      70657220 
 582      696E6974 
 582      20666169 
 582      6C65640D 
 583 0015 000000   		.space	3
 584              	.LC1:
 585 0018 4661696C 		.ascii	"Failed to apply for black memory...\015\000"
 585      65642074 
 585      6F206170 
 585      706C7920 
 585      666F7220 
 586 003d 000000   		.space	3
 587              	.LC2:
 588 0040 5061696E 		.ascii	"Paint_NewImage\015\000"
 588      745F4E65 
 588      77496D61 
 588      67650D00 
 589              	.LC3:
 590 0050 73686F77 		.ascii	"show image for array\015\000"
 590      20696D61 
 590      67652066 
 590      6F722061 
 590      72726179 
 591              		.text
ARM GAS  /tmp/ccRt7XoM.s 			page 20


 592              	.Letext0:
 593              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 594              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 595              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 596              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 597              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 598              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 599              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 600              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
 601              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 602              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 603              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
 604              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 605              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 606              		.file 15 "Display/e-Paper/EPD_2in9.h"
 607              		.file 16 "Display/GUI/../Fonts/fonts.h"
 608              		.file 17 "Display/GUI/GUI_Paint.h"
 609              		.file 18 "Display/e-Paper/ImageData.h"
 610              		.file 19 "/usr/arm-none-eabi/include/sys/lock.h"
 611              		.file 20 "/usr/arm-none-eabi/include/sys/_types.h"
 612              		.file 21 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 613              		.file 22 "/usr/arm-none-eabi/include/sys/reent.h"
 614              		.file 23 "/usr/arm-none-eabi/include/stdlib.h"
 615              		.file 24 "<built-in>"
 616              		.file 25 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
ARM GAS  /tmp/ccRt7XoM.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccRt7XoM.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccRt7XoM.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccRt7XoM.s:165    .text.MX_GPIO_Init:00000000000000c8 $d
     /tmp/ccRt7XoM.s:173    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccRt7XoM.s:179    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccRt7XoM.s:223    .text.MX_USART2_UART_Init:0000000000000028 $d
                            *COM*:0000000000000078 huart2
     /tmp/ccRt7XoM.s:229    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccRt7XoM.s:235    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccRt7XoM.s:291    .text.MX_SPI1_Init:000000000000003c $d
                            *COM*:0000000000000064 hspi1
     /tmp/ccRt7XoM.s:297    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccRt7XoM.s:304    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccRt7XoM.s:407    .text.main:0000000000000000 $t
     /tmp/ccRt7XoM.s:414    .text.main:0000000000000000 main
     /tmp/ccRt7XoM.s:548    .text.main:00000000000000a8 $d
     /tmp/ccRt7XoM.s:558    .text.Error_Handler:0000000000000000 $t
     /tmp/ccRt7XoM.s:565    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccRt7XoM.s:580    .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_SPI_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_PWREx_ControlVoltageScaling
HAL_Init
EPD_Init
EPD_Clear
HAL_Delay
malloc
puts
Paint_NewImage
Paint_SelectImage
Paint_Clear
Paint_DrawBitMap
EPD_Display
lut_full_update
gImage_2in9
