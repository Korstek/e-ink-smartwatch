ARM GAS  /tmp/ccypGBLc.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB127:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "EPD_2in9.h"
  27:Src/main.c    **** #include "DEV_Config.h"
  28:Src/main.c    **** #include "GUI_Paint.h"
  29:Src/main.c    **** #include "ImageData.h"
  30:Src/main.c    **** #include <stdlib.h>
  31:Src/main.c    **** /* USER CODE END Includes */
  32:Src/main.c    **** 
ARM GAS  /tmp/ccypGBLc.s 			page 2


  33:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  34:Src/main.c    **** /* USER CODE BEGIN PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* USER CODE END PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE END PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE END PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** SPI_HandleTypeDef hspi1;
  50:Src/main.c    **** 
  51:Src/main.c    **** UART_HandleTypeDef huart2;
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN PV */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END PV */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  58:Src/main.c    **** void SystemClock_Config(void);
  59:Src/main.c    **** static void MX_GPIO_Init(void);
  60:Src/main.c    **** static void MX_USART2_UART_Init(void);
  61:Src/main.c    **** static void MX_SPI1_Init(void);
  62:Src/main.c    **** /* USER CODE BEGIN PFP */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PFP */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  67:Src/main.c    **** /* USER CODE BEGIN 0 */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END 0 */
  70:Src/main.c    **** 
  71:Src/main.c    **** /**
  72:Src/main.c    ****   * @brief  The application entry point.
  73:Src/main.c    ****   * @retval int
  74:Src/main.c    ****   */
  75:Src/main.c    **** int main(void)
  76:Src/main.c    **** {
  77:Src/main.c    ****   /* USER CODE BEGIN 1 */
  78:Src/main.c    **** 
  79:Src/main.c    ****   /* USER CODE END 1 */
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  84:Src/main.c    ****   HAL_Init();
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* USER CODE BEGIN Init */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE END Init */
  89:Src/main.c    **** 
ARM GAS  /tmp/ccypGBLc.s 			page 3


  90:Src/main.c    ****   /* Configure the system clock */
  91:Src/main.c    ****   SystemClock_Config();
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE END SysInit */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* Initialize all configured peripherals */
  98:Src/main.c    ****   MX_GPIO_Init();
  99:Src/main.c    ****   MX_USART2_UART_Init();
 100:Src/main.c    ****   MX_SPI1_Init();
 101:Src/main.c    ****   /* USER CODE BEGIN 2 */
 102:Src/main.c    **** 
 103:Src/main.c    ****     if(EPD_Init(lut_full_update) != 0) {
 104:Src/main.c    ****         printf("e-Paper init failed\r\n");
 105:Src/main.c    ****     }
 106:Src/main.c    ****     EPD_Clear();
 107:Src/main.c    ****     DEV_Delay_ms(500);
 108:Src/main.c    **** 
 109:Src/main.c    ****     //Create a new image cache
 110:Src/main.c    ****     UBYTE *BlackImage;
 111:Src/main.c    ****     UWORD Imagesize = ((EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1)) * EPD_HEIGHT;
 112:Src/main.c    ****     if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 113:Src/main.c    ****         printf("Failed to apply for black memory...\r\n");
 114:Src/main.c    ****         return -1;
 115:Src/main.c    ****     }
 116:Src/main.c    ****     printf("Paint_NewImage\r\n");
 117:Src/main.c    ****     Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE);
 118:Src/main.c    ****     Paint_SelectImage(BlackImage);
 119:Src/main.c    ****     Paint_Clear(WHITE);
 120:Src/main.c    **** 
 121:Src/main.c    **** #if 1
 122:Src/main.c    ****     /*show image for array*/
 123:Src/main.c    ****     printf("show image for array\r\n");
 124:Src/main.c    ****     Paint_SelectImage(BlackImage);
 125:Src/main.c    ****     Paint_Clear(WHITE);
 126:Src/main.c    ****     Paint_DrawBitMap(gImage_2in9);
 127:Src/main.c    **** 
 128:Src/main.c    ****     EPD_Display(BlackImage);
 129:Src/main.c    ****     DEV_Delay_ms(2000);
 130:Src/main.c    **** #endif
 131:Src/main.c    **** 
 132:Src/main.c    **** #if 1   // Drawing on the image
 133:Src/main.c    ****     //1.Select Image
 134:Src/main.c    ****     printf("SelectImage:BlackImage\r\n");
 135:Src/main.c    ****     Paint_SelectImage(BlackImage);
 136:Src/main.c    ****     Paint_Clear(WHITE);
 137:Src/main.c    **** 
 138:Src/main.c    ****     // 2.Drawing on the image
 139:Src/main.c    ****     printf("Drawing:BlackImage\r\n");
 140:Src/main.c    ****     Paint_DrawPoint(10, 80, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 141:Src/main.c    ****     Paint_DrawPoint(10, 90, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 142:Src/main.c    ****     Paint_DrawPoint(10, 100, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 143:Src/main.c    ****     Paint_DrawLine(20, 70, 70, 120, BLACK, LINE_STYLE_SOLID, DOT_PIXEL_1X1);
 144:Src/main.c    ****     Paint_DrawLine(70, 70, 20, 120, BLACK, LINE_STYLE_SOLID, DOT_PIXEL_1X1);
 145:Src/main.c    ****     Paint_DrawRectangle(20, 70, 70, 120, BLACK, DRAW_FILL_EMPTY, DOT_PIXEL_1X1);
 146:Src/main.c    ****     Paint_DrawRectangle(80, 70, 130, 120, BLACK, DRAW_FILL_FULL, DOT_PIXEL_1X1);
ARM GAS  /tmp/ccypGBLc.s 			page 4


 147:Src/main.c    ****     Paint_DrawCircle(45, 95, 20, BLACK, DRAW_FILL_EMPTY, DOT_PIXEL_1X1);
 148:Src/main.c    ****     Paint_DrawCircle(105, 95, 20, WHITE, DRAW_FILL_FULL, DOT_PIXEL_1X1);
 149:Src/main.c    ****     Paint_DrawLine(85, 95, 125, 95, BLACK, LINE_STYLE_DOTTED, DOT_PIXEL_1X1);
 150:Src/main.c    ****     Paint_DrawLine(105, 75, 105, 115, BLACK, LINE_STYLE_DOTTED, DOT_PIXEL_1X1);
 151:Src/main.c    ****     Paint_DrawString_EN(10, 0, "waveshare", &Font16, BLACK, WHITE);
 152:Src/main.c    ****     Paint_DrawString_EN(10, 20, "hello world", &Font12, WHITE, BLACK);
 153:Src/main.c    ****     Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
 154:Src/main.c    ****     Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
 155:Src/main.c    **** 
 156:Src/main.c    ****     printf("EPD_Display\r\n");
 157:Src/main.c    ****     EPD_Display(BlackImage);
 158:Src/main.c    ****     DEV_Delay_ms(2000);
 159:Src/main.c    **** #endif
 160:Src/main.c    **** 
 161:Src/main.c    **** #if 1   //Partial refresh, example shows time
 162:Src/main.c    ****     if(EPD_Init(lut_partial_update) != 0) {
 163:Src/main.c    ****         printf("e-Paper init failed\r\n");
 164:Src/main.c    ****     }
 165:Src/main.c    **** 		Paint_SelectImage(BlackImage);
 166:Src/main.c    ****     PAINT_TIME sPaint_time;
 167:Src/main.c    ****     sPaint_time.Hour = 12;
 168:Src/main.c    ****     sPaint_time.Min = 34;
 169:Src/main.c    ****     sPaint_time.Sec = 56;
 170:Src/main.c    ****     for (;;) {
 171:Src/main.c    ****         sPaint_time.Sec = sPaint_time.Sec + 1;
 172:Src/main.c    ****         if (sPaint_time.Sec == 60) {
 173:Src/main.c    ****             sPaint_time.Min = sPaint_time.Min + 1;
 174:Src/main.c    ****             sPaint_time.Sec = 0;
 175:Src/main.c    ****             if (sPaint_time.Min == 60) {
 176:Src/main.c    ****                 sPaint_time.Hour =  sPaint_time.Hour + 1;
 177:Src/main.c    ****                 sPaint_time.Min = 0;
 178:Src/main.c    ****                 if (sPaint_time.Hour == 24) {
 179:Src/main.c    ****                     sPaint_time.Hour = 0;
 180:Src/main.c    ****                     sPaint_time.Min = 0;
 181:Src/main.c    ****                     sPaint_time.Sec = 0;
 182:Src/main.c    ****                 }
 183:Src/main.c    ****             }
 184:Src/main.c    ****         }
 185:Src/main.c    ****         Paint_ClearWindows(15, 65, 15 + Font20.Width * 7, 65 + Font20.Height, WHITE);
 186:Src/main.c    ****         Paint_DrawTime(15, 65, &sPaint_time, &Font20, WHITE, BLACK);
 187:Src/main.c    **** 
 188:Src/main.c    **** 				EPD_Display(BlackImage);
 189:Src/main.c    ****         DEV_Delay_ms(500);//Analog clock 1s
 190:Src/main.c    ****     }
 191:Src/main.c    **** 
 192:Src/main.c    **** #endif
 193:Src/main.c    **** 
 194:Src/main.c    ****     printf("Goto Sleep mode...\r\n");
 195:Src/main.c    ****     EPD_Sleep();
 196:Src/main.c    ****     free(BlackImage);
 197:Src/main.c    ****     BlackImage = NULL;
 198:Src/main.c    **** 
 199:Src/main.c    **** 
 200:Src/main.c    ****   /* USER CODE END 2 */
 201:Src/main.c    **** 
 202:Src/main.c    ****   /* Infinite loop */
 203:Src/main.c    ****   /* USER CODE BEGIN WHILE */
ARM GAS  /tmp/ccypGBLc.s 			page 5


 204:Src/main.c    ****   while (1)
 205:Src/main.c    ****   {
 206:Src/main.c    ****     /* USER CODE END WHILE */
 207:Src/main.c    **** 
 208:Src/main.c    ****     /* USER CODE BEGIN 3 */
 209:Src/main.c    ****   }
 210:Src/main.c    ****   /* USER CODE END 3 */
 211:Src/main.c    **** }
 212:Src/main.c    **** 
 213:Src/main.c    **** /**
 214:Src/main.c    ****   * @brief System Clock Configuration
 215:Src/main.c    ****   * @retval None
 216:Src/main.c    ****   */
 217:Src/main.c    **** void SystemClock_Config(void)
 218:Src/main.c    **** {
 219:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 220:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 221:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 222:Src/main.c    **** 
 223:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 224:Src/main.c    ****   */
 225:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 226:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 227:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 228:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 229:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 230:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 1;
 231:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 10;
 232:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 233:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 234:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 235:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 236:Src/main.c    ****   {
 237:Src/main.c    ****     Error_Handler();
 238:Src/main.c    ****   }
 239:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 240:Src/main.c    ****   */
 241:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 242:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 243:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 244:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 245:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 246:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 247:Src/main.c    **** 
 248:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 249:Src/main.c    ****   {
 250:Src/main.c    ****     Error_Handler();
 251:Src/main.c    ****   }
 252:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 253:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 254:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 255:Src/main.c    ****   {
 256:Src/main.c    ****     Error_Handler();
 257:Src/main.c    ****   }
 258:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 259:Src/main.c    ****   */
 260:Src/main.c    ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
ARM GAS  /tmp/ccypGBLc.s 			page 6


 261:Src/main.c    ****   {
 262:Src/main.c    ****     Error_Handler();
 263:Src/main.c    ****   }
 264:Src/main.c    **** }
 265:Src/main.c    **** 
 266:Src/main.c    **** /**
 267:Src/main.c    ****   * @brief SPI1 Initialization Function
 268:Src/main.c    ****   * @param None
 269:Src/main.c    ****   * @retval None
 270:Src/main.c    ****   */
 271:Src/main.c    **** static void MX_SPI1_Init(void)
 272:Src/main.c    **** {
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 279:Src/main.c    **** 
 280:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 281:Src/main.c    ****   /* SPI1 parameter configuration*/
 282:Src/main.c    ****   hspi1.Instance = SPI1;
 283:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 284:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 285:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 286:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 287:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 288:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 289:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 290:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 291:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 292:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 293:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 294:Src/main.c    ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 295:Src/main.c    ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 296:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 297:Src/main.c    ****   {
 298:Src/main.c    ****     Error_Handler();
 299:Src/main.c    ****   }
 300:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 301:Src/main.c    **** 
 302:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 303:Src/main.c    **** 
 304:Src/main.c    **** }
 305:Src/main.c    **** 
 306:Src/main.c    **** /**
 307:Src/main.c    ****   * @brief USART2 Initialization Function
 308:Src/main.c    ****   * @param None
 309:Src/main.c    ****   * @retval None
 310:Src/main.c    ****   */
 311:Src/main.c    **** static void MX_USART2_UART_Init(void)
 312:Src/main.c    **** {
 313:Src/main.c    **** 
 314:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 315:Src/main.c    **** 
 316:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 317:Src/main.c    **** 
ARM GAS  /tmp/ccypGBLc.s 			page 7


 318:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 319:Src/main.c    **** 
 320:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 321:Src/main.c    ****   huart2.Instance = USART2;
 322:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 323:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 324:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 325:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 326:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 327:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 328:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 329:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 330:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 331:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 332:Src/main.c    ****   {
 333:Src/main.c    ****     Error_Handler();
 334:Src/main.c    ****   }
 335:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 336:Src/main.c    **** 
 337:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 338:Src/main.c    **** 
 339:Src/main.c    **** }
 340:Src/main.c    **** 
 341:Src/main.c    **** /**
 342:Src/main.c    ****   * @brief GPIO Initialization Function
 343:Src/main.c    ****   * @param None
 344:Src/main.c    ****   * @retval None
 345:Src/main.c    ****   */
 346:Src/main.c    **** static void MX_GPIO_Init(void)
 347:Src/main.c    **** {
  27              		.loc 1 347 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 348:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 348 0
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
  48              	.LBB2:
 349:Src/main.c    **** 
 350:Src/main.c    ****   /* GPIO Ports Clock Enable */
 351:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 351 0
ARM GAS  /tmp/ccypGBLc.s 			page 8


  50 0010 2D4B     		ldr	r3, .L3
  51 0012 DA6C     		ldr	r2, [r3, #76]
  52 0014 42F00402 		orr	r2, r2, #4
  53 0018 DA64     		str	r2, [r3, #76]
  54 001a DA6C     		ldr	r2, [r3, #76]
  55 001c 02F00402 		and	r2, r2, #4
  56 0020 0192     		str	r2, [sp, #4]
  57 0022 019A     		ldr	r2, [sp, #4]
  58              	.LBE2:
  59              	.LBB3:
 352:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  60              		.loc 1 352 0
  61 0024 DA6C     		ldr	r2, [r3, #76]
  62 0026 42F08002 		orr	r2, r2, #128
  63 002a DA64     		str	r2, [r3, #76]
  64 002c DA6C     		ldr	r2, [r3, #76]
  65 002e 02F08002 		and	r2, r2, #128
  66 0032 0292     		str	r2, [sp, #8]
  67 0034 029A     		ldr	r2, [sp, #8]
  68              	.LBE3:
  69              	.LBB4:
 353:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  70              		.loc 1 353 0
  71 0036 DA6C     		ldr	r2, [r3, #76]
  72 0038 42F00102 		orr	r2, r2, #1
  73 003c DA64     		str	r2, [r3, #76]
  74 003e DA6C     		ldr	r2, [r3, #76]
  75 0040 02F00102 		and	r2, r2, #1
  76 0044 0392     		str	r2, [sp, #12]
  77 0046 039A     		ldr	r2, [sp, #12]
  78              	.LBE4:
  79              	.LBB5:
 354:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  80              		.loc 1 354 0
  81 0048 DA6C     		ldr	r2, [r3, #76]
  82 004a 42F00202 		orr	r2, r2, #2
  83 004e DA64     		str	r2, [r3, #76]
  84 0050 DB6C     		ldr	r3, [r3, #76]
  85 0052 03F00203 		and	r3, r3, #2
  86 0056 0493     		str	r3, [sp, #16]
  87 0058 049B     		ldr	r3, [sp, #16]
  88              	.LBE5:
 355:Src/main.c    **** 
 356:Src/main.c    ****   /*Configure GPIO pin Output Level */
 357:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|RST_Pin|DC_Pin, GPIO_PIN_RESET);
  89              		.loc 1 357 0
  90 005a 2246     		mov	r2, r4
  91 005c 4FF4A461 		mov	r1, #1312
  92 0060 4FF09040 		mov	r0, #1207959552
  93 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL0:
 358:Src/main.c    **** 
 359:Src/main.c    ****   /*Configure GPIO pin Output Level */
 360:Src/main.c    ****   HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  95              		.loc 1 360 0
  96 0068 184D     		ldr	r5, .L3+4
  97 006a 2246     		mov	r2, r4
ARM GAS  /tmp/ccypGBLc.s 			page 9


  98 006c 1021     		movs	r1, #16
  99 006e 2846     		mov	r0, r5
 100 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL1:
 361:Src/main.c    **** 
 362:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 363:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 102              		.loc 1 363 0
 103 0074 4FF40053 		mov	r3, #8192
 104 0078 0593     		str	r3, [sp, #20]
 364:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 105              		.loc 1 364 0
 106 007a 154B     		ldr	r3, .L3+8
 107 007c 0693     		str	r3, [sp, #24]
 365:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 108              		.loc 1 365 0
 109 007e 0794     		str	r4, [sp, #28]
 366:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 110              		.loc 1 366 0
 111 0080 05A9     		add	r1, sp, #20
 112 0082 1448     		ldr	r0, .L3+12
 113 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 114              	.LVL2:
 367:Src/main.c    **** 
 368:Src/main.c    ****   /*Configure GPIO pins : LD2_Pin RST_Pin DC_Pin */
 369:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin|RST_Pin|DC_Pin;
 115              		.loc 1 369 0
 116 0088 4FF4A463 		mov	r3, #1312
 117 008c 0593     		str	r3, [sp, #20]
 370:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 370 0
 119 008e 0126     		movs	r6, #1
 120 0090 0696     		str	r6, [sp, #24]
 371:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 121              		.loc 1 371 0
 122 0092 0794     		str	r4, [sp, #28]
 372:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 123              		.loc 1 372 0
 124 0094 0894     		str	r4, [sp, #32]
 373:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 125              		.loc 1 373 0
 126 0096 05A9     		add	r1, sp, #20
 127 0098 4FF09040 		mov	r0, #1207959552
 128 009c FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL3:
 374:Src/main.c    **** 
 375:Src/main.c    ****   /*Configure GPIO pin : BUSY_Pin */
 376:Src/main.c    ****   GPIO_InitStruct.Pin = BUSY_Pin;
 130              		.loc 1 376 0
 131 00a0 4FF48063 		mov	r3, #1024
 132 00a4 0593     		str	r3, [sp, #20]
 377:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 133              		.loc 1 377 0
 134 00a6 0694     		str	r4, [sp, #24]
 378:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 135              		.loc 1 378 0
 136 00a8 0794     		str	r4, [sp, #28]
ARM GAS  /tmp/ccypGBLc.s 			page 10


 379:Src/main.c    ****   HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 137              		.loc 1 379 0
 138 00aa 05A9     		add	r1, sp, #20
 139 00ac 2846     		mov	r0, r5
 140 00ae FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL4:
 380:Src/main.c    **** 
 381:Src/main.c    ****   /*Configure GPIO pin : SPI_CS_Pin */
 382:Src/main.c    ****   GPIO_InitStruct.Pin = SPI_CS_Pin;
 142              		.loc 1 382 0
 143 00b2 1023     		movs	r3, #16
 144 00b4 0593     		str	r3, [sp, #20]
 383:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 145              		.loc 1 383 0
 146 00b6 0696     		str	r6, [sp, #24]
 384:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 147              		.loc 1 384 0
 148 00b8 0794     		str	r4, [sp, #28]
 385:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 149              		.loc 1 385 0
 150 00ba 0894     		str	r4, [sp, #32]
 386:Src/main.c    ****   HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 151              		.loc 1 386 0
 152 00bc 05A9     		add	r1, sp, #20
 153 00be 2846     		mov	r0, r5
 154 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 155              	.LVL5:
 387:Src/main.c    **** 
 388:Src/main.c    **** }
 156              		.loc 1 388 0
 157 00c4 0AB0     		add	sp, sp, #40
 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 16
 160              		@ sp needed
 161 00c6 70BD     		pop	{r4, r5, r6, pc}
 162              	.L4:
 163              		.align	2
 164              	.L3:
 165 00c8 00100240 		.word	1073876992
 166 00cc 00040048 		.word	1207960576
 167 00d0 00002110 		.word	270598144
 168 00d4 00080048 		.word	1207961600
 169              		.cfi_endproc
 170              	.LFE127:
 172              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 173              		.align	1
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	MX_USART2_UART_Init:
 180              	.LFB126:
 312:Src/main.c    **** 
 181              		.loc 1 312 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccypGBLc.s 			page 11


 185 0000 08B5     		push	{r3, lr}
 186              	.LCFI3:
 187              		.cfi_def_cfa_offset 8
 188              		.cfi_offset 3, -8
 189              		.cfi_offset 14, -4
 321:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 190              		.loc 1 321 0
 191 0002 0948     		ldr	r0, .L7
 192 0004 094B     		ldr	r3, .L7+4
 193 0006 0360     		str	r3, [r0]
 322:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 194              		.loc 1 322 0
 195 0008 4FF4E133 		mov	r3, #115200
 196 000c 4360     		str	r3, [r0, #4]
 323:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 197              		.loc 1 323 0
 198 000e 0023     		movs	r3, #0
 199 0010 8360     		str	r3, [r0, #8]
 324:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 200              		.loc 1 324 0
 201 0012 C360     		str	r3, [r0, #12]
 325:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 202              		.loc 1 325 0
 203 0014 0361     		str	r3, [r0, #16]
 326:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 204              		.loc 1 326 0
 205 0016 0C22     		movs	r2, #12
 206 0018 4261     		str	r2, [r0, #20]
 327:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 207              		.loc 1 327 0
 208 001a 8361     		str	r3, [r0, #24]
 328:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 209              		.loc 1 328 0
 210 001c C361     		str	r3, [r0, #28]
 329:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 211              		.loc 1 329 0
 212 001e 0362     		str	r3, [r0, #32]
 330:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 213              		.loc 1 330 0
 214 0020 4362     		str	r3, [r0, #36]
 331:Src/main.c    ****   {
 215              		.loc 1 331 0
 216 0022 FFF7FEFF 		bl	HAL_UART_Init
 217              	.LVL6:
 339:Src/main.c    **** 
 218              		.loc 1 339 0
 219 0026 08BD     		pop	{r3, pc}
 220              	.L8:
 221              		.align	2
 222              	.L7:
 223 0028 00000000 		.word	huart2
 224 002c 00440040 		.word	1073759232
 225              		.cfi_endproc
 226              	.LFE126:
 228              		.section	.text.MX_SPI1_Init,"ax",%progbits
 229              		.align	1
 230              		.syntax unified
ARM GAS  /tmp/ccypGBLc.s 			page 12


 231              		.thumb
 232              		.thumb_func
 233              		.fpu fpv4-sp-d16
 235              	MX_SPI1_Init:
 236              	.LFB125:
 272:Src/main.c    **** 
 237              		.loc 1 272 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241 0000 08B5     		push	{r3, lr}
 242              	.LCFI4:
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 3, -8
 245              		.cfi_offset 14, -4
 282:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 246              		.loc 1 282 0
 247 0002 0E48     		ldr	r0, .L11
 248 0004 0E4B     		ldr	r3, .L11+4
 249 0006 0360     		str	r3, [r0]
 283:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 250              		.loc 1 283 0
 251 0008 4FF48273 		mov	r3, #260
 252 000c 4360     		str	r3, [r0, #4]
 284:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 253              		.loc 1 284 0
 254 000e 0023     		movs	r3, #0
 255 0010 8360     		str	r3, [r0, #8]
 285:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 256              		.loc 1 285 0
 257 0012 4FF4E062 		mov	r2, #1792
 258 0016 C260     		str	r2, [r0, #12]
 286:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 259              		.loc 1 286 0
 260 0018 0361     		str	r3, [r0, #16]
 287:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 261              		.loc 1 287 0
 262 001a 4361     		str	r3, [r0, #20]
 288:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 263              		.loc 1 288 0
 264 001c 4FF40072 		mov	r2, #512
 265 0020 8261     		str	r2, [r0, #24]
 289:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 266              		.loc 1 289 0
 267 0022 2822     		movs	r2, #40
 268 0024 C261     		str	r2, [r0, #28]
 290:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 269              		.loc 1 290 0
 270 0026 0362     		str	r3, [r0, #32]
 291:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 271              		.loc 1 291 0
 272 0028 4362     		str	r3, [r0, #36]
 292:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 273              		.loc 1 292 0
 274 002a 8362     		str	r3, [r0, #40]
 293:Src/main.c    ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 275              		.loc 1 293 0
ARM GAS  /tmp/ccypGBLc.s 			page 13


 276 002c 0722     		movs	r2, #7
 277 002e C262     		str	r2, [r0, #44]
 294:Src/main.c    ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 278              		.loc 1 294 0
 279 0030 0363     		str	r3, [r0, #48]
 295:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 280              		.loc 1 295 0
 281 0032 0823     		movs	r3, #8
 282 0034 4363     		str	r3, [r0, #52]
 296:Src/main.c    ****   {
 283              		.loc 1 296 0
 284 0036 FFF7FEFF 		bl	HAL_SPI_Init
 285              	.LVL7:
 304:Src/main.c    **** 
 286              		.loc 1 304 0
 287 003a 08BD     		pop	{r3, pc}
 288              	.L12:
 289              		.align	2
 290              	.L11:
 291 003c 00000000 		.word	hspi1
 292 0040 00300140 		.word	1073819648
 293              		.cfi_endproc
 294              	.LFE125:
 296              		.section	.text.SystemClock_Config,"ax",%progbits
 297              		.align	1
 298              		.global	SystemClock_Config
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu fpv4-sp-d16
 304              	SystemClock_Config:
 305              	.LFB124:
 218:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 306              		.loc 1 218 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 224
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310 0000 30B5     		push	{r4, r5, lr}
 311              	.LCFI5:
 312              		.cfi_def_cfa_offset 12
 313              		.cfi_offset 4, -12
 314              		.cfi_offset 5, -8
 315              		.cfi_offset 14, -4
 316 0002 B9B0     		sub	sp, sp, #228
 317              	.LCFI6:
 318              		.cfi_def_cfa_offset 240
 219:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 319              		.loc 1 219 0
 320 0004 2422     		movs	r2, #36
 321 0006 0021     		movs	r1, #0
 322 0008 28A8     		add	r0, sp, #160
 323 000a FFF7FEFF 		bl	memset
 324              	.LVL8:
 220:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 325              		.loc 1 220 0
 326 000e 0024     		movs	r4, #0
 327 0010 2294     		str	r4, [sp, #136]
ARM GAS  /tmp/ccypGBLc.s 			page 14


 328 0012 2394     		str	r4, [sp, #140]
 329 0014 2494     		str	r4, [sp, #144]
 330 0016 2594     		str	r4, [sp, #148]
 331 0018 2694     		str	r4, [sp, #152]
 221:Src/main.c    **** 
 332              		.loc 1 221 0
 333 001a 8822     		movs	r2, #136
 334 001c 2146     		mov	r1, r4
 335 001e 6846     		mov	r0, sp
 336 0020 FFF7FEFF 		bl	memset
 337              	.LVL9:
 225:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 338              		.loc 1 225 0
 339 0024 0225     		movs	r5, #2
 340 0026 2795     		str	r5, [sp, #156]
 226:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 341              		.loc 1 226 0
 342 0028 4FF48073 		mov	r3, #256
 343 002c 2A93     		str	r3, [sp, #168]
 227:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 344              		.loc 1 227 0
 345 002e 1023     		movs	r3, #16
 346 0030 2B93     		str	r3, [sp, #172]
 228:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 347              		.loc 1 228 0
 348 0032 3195     		str	r5, [sp, #196]
 229:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 1;
 349              		.loc 1 229 0
 350 0034 3295     		str	r5, [sp, #200]
 230:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 10;
 351              		.loc 1 230 0
 352 0036 0123     		movs	r3, #1
 353 0038 3393     		str	r3, [sp, #204]
 231:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 354              		.loc 1 231 0
 355 003a 0A23     		movs	r3, #10
 356 003c 3493     		str	r3, [sp, #208]
 232:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 357              		.loc 1 232 0
 358 003e 0723     		movs	r3, #7
 359 0040 3593     		str	r3, [sp, #212]
 233:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 360              		.loc 1 233 0
 361 0042 3695     		str	r5, [sp, #216]
 234:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 362              		.loc 1 234 0
 363 0044 3795     		str	r5, [sp, #220]
 235:Src/main.c    ****   {
 364              		.loc 1 235 0
 365 0046 27A8     		add	r0, sp, #156
 366 0048 FFF7FEFF 		bl	HAL_RCC_OscConfig
 367              	.LVL10:
 241:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 368              		.loc 1 241 0
 369 004c 0F23     		movs	r3, #15
 370 004e 2293     		str	r3, [sp, #136]
 243:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccypGBLc.s 			page 15


 371              		.loc 1 243 0
 372 0050 0323     		movs	r3, #3
 373 0052 2393     		str	r3, [sp, #140]
 244:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 374              		.loc 1 244 0
 375 0054 2494     		str	r4, [sp, #144]
 245:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 376              		.loc 1 245 0
 377 0056 2594     		str	r4, [sp, #148]
 246:Src/main.c    **** 
 378              		.loc 1 246 0
 379 0058 2694     		str	r4, [sp, #152]
 248:Src/main.c    ****   {
 380              		.loc 1 248 0
 381 005a 0421     		movs	r1, #4
 382 005c 22A8     		add	r0, sp, #136
 383 005e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 384              	.LVL11:
 252:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 385              		.loc 1 252 0
 386 0062 0095     		str	r5, [sp]
 253:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 387              		.loc 1 253 0
 388 0064 0F94     		str	r4, [sp, #60]
 254:Src/main.c    ****   {
 389              		.loc 1 254 0
 390 0066 6846     		mov	r0, sp
 391 0068 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 392              	.LVL12:
 260:Src/main.c    ****   {
 393              		.loc 1 260 0
 394 006c 4FF40070 		mov	r0, #512
 395 0070 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 396              	.LVL13:
 264:Src/main.c    **** 
 397              		.loc 1 264 0
 398 0074 39B0     		add	sp, sp, #228
 399              	.LCFI7:
 400              		.cfi_def_cfa_offset 12
 401              		@ sp needed
 402 0076 30BD     		pop	{r4, r5, pc}
 403              		.cfi_endproc
 404              	.LFE124:
 406              		.section	.text.main,"ax",%progbits
 407              		.align	1
 408              		.global	main
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu fpv4-sp-d16
 414              	main:
 415              	.LFB123:
  76:Src/main.c    ****   /* USER CODE BEGIN 1 */
 416              		.loc 1 76 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 8
 419              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccypGBLc.s 			page 16


 420 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 421              	.LCFI8:
 422              		.cfi_def_cfa_offset 24
 423              		.cfi_offset 4, -24
 424              		.cfi_offset 5, -20
 425              		.cfi_offset 6, -16
 426              		.cfi_offset 7, -12
 427              		.cfi_offset 8, -8
 428              		.cfi_offset 14, -4
 429 0004 86B0     		sub	sp, sp, #24
 430              	.LCFI9:
 431              		.cfi_def_cfa_offset 48
  84:Src/main.c    **** 
 432              		.loc 1 84 0
 433 0006 FFF7FEFF 		bl	HAL_Init
 434              	.LVL14:
  91:Src/main.c    **** 
 435              		.loc 1 91 0
 436 000a FFF7FEFF 		bl	SystemClock_Config
 437              	.LVL15:
  98:Src/main.c    ****   MX_USART2_UART_Init();
 438              		.loc 1 98 0
 439 000e FFF7FEFF 		bl	MX_GPIO_Init
 440              	.LVL16:
  99:Src/main.c    ****   MX_SPI1_Init();
 441              		.loc 1 99 0
 442 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 443              	.LVL17:
 100:Src/main.c    ****   /* USER CODE BEGIN 2 */
 444              		.loc 1 100 0
 445 0016 FFF7FEFF 		bl	MX_SPI1_Init
 446              	.LVL18:
 103:Src/main.c    ****         printf("e-Paper init failed\r\n");
 447              		.loc 1 103 0
 448 001a 9848     		ldr	r0, .L26
 449 001c FFF7FEFF 		bl	EPD_Init
 450              	.LVL19:
 451 0020 0028     		cmp	r0, #0
 452 0022 40F0DB80 		bne	.L24
 453              	.L16:
 106:Src/main.c    ****     DEV_Delay_ms(500);
 454              		.loc 1 106 0
 455 0026 FFF7FEFF 		bl	EPD_Clear
 456              	.LVL20:
 107:Src/main.c    **** 
 457              		.loc 1 107 0
 458 002a 4FF4FA70 		mov	r0, #500
 459 002e FFF7FEFF 		bl	HAL_Delay
 460              	.LVL21:
 112:Src/main.c    ****         printf("Failed to apply for black memory...\r\n");
 461              		.loc 1 112 0
 462 0032 4FF49450 		mov	r0, #4736
 463 0036 FFF7FEFF 		bl	malloc
 464              	.LVL22:
 465 003a 0546     		mov	r5, r0
 466 003c 0028     		cmp	r0, #0
 467 003e 00F01481 		beq	.L22
ARM GAS  /tmp/ccypGBLc.s 			page 17


 116:Src/main.c    ****     Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE);
 468              		.loc 1 116 0
 469 0042 8F48     		ldr	r0, .L26+4
 470              	.LVL23:
 471 0044 FFF7FEFF 		bl	puts
 472              	.LVL24:
 117:Src/main.c    ****     Paint_SelectImage(BlackImage);
 473              		.loc 1 117 0
 474 0048 FF27     		movs	r7, #255
 475 004a 0097     		str	r7, [sp]
 476 004c 4FF48773 		mov	r3, #270
 477 0050 4FF49472 		mov	r2, #296
 478 0054 8021     		movs	r1, #128
 479 0056 2846     		mov	r0, r5
 480 0058 FFF7FEFF 		bl	Paint_NewImage
 481              	.LVL25:
 118:Src/main.c    ****     Paint_Clear(WHITE);
 482              		.loc 1 118 0
 483 005c 2846     		mov	r0, r5
 484 005e FFF7FEFF 		bl	Paint_SelectImage
 485              	.LVL26:
 119:Src/main.c    **** 
 486              		.loc 1 119 0
 487 0062 3846     		mov	r0, r7
 488 0064 FFF7FEFF 		bl	Paint_Clear
 489              	.LVL27:
 123:Src/main.c    ****     Paint_SelectImage(BlackImage);
 490              		.loc 1 123 0
 491 0068 8648     		ldr	r0, .L26+8
 492 006a FFF7FEFF 		bl	puts
 493              	.LVL28:
 124:Src/main.c    ****     Paint_Clear(WHITE);
 494              		.loc 1 124 0
 495 006e 2846     		mov	r0, r5
 496 0070 FFF7FEFF 		bl	Paint_SelectImage
 497              	.LVL29:
 125:Src/main.c    ****     Paint_DrawBitMap(gImage_2in9);
 498              		.loc 1 125 0
 499 0074 3846     		mov	r0, r7
 500 0076 FFF7FEFF 		bl	Paint_Clear
 501              	.LVL30:
 126:Src/main.c    **** 
 502              		.loc 1 126 0
 503 007a 8348     		ldr	r0, .L26+12
 504 007c FFF7FEFF 		bl	Paint_DrawBitMap
 505              	.LVL31:
 128:Src/main.c    ****     DEV_Delay_ms(2000);
 506              		.loc 1 128 0
 507 0080 2846     		mov	r0, r5
 508 0082 FFF7FEFF 		bl	EPD_Display
 509              	.LVL32:
 129:Src/main.c    **** #endif
 510              		.loc 1 129 0
 511 0086 4FF4FA60 		mov	r0, #2000
 512 008a FFF7FEFF 		bl	HAL_Delay
 513              	.LVL33:
 134:Src/main.c    ****     Paint_SelectImage(BlackImage);
ARM GAS  /tmp/ccypGBLc.s 			page 18


 514              		.loc 1 134 0
 515 008e 7F48     		ldr	r0, .L26+16
 516 0090 FFF7FEFF 		bl	puts
 517              	.LVL34:
 135:Src/main.c    ****     Paint_Clear(WHITE);
 518              		.loc 1 135 0
 519 0094 2846     		mov	r0, r5
 520 0096 FFF7FEFF 		bl	Paint_SelectImage
 521              	.LVL35:
 136:Src/main.c    **** 
 522              		.loc 1 136 0
 523 009a 3846     		mov	r0, r7
 524 009c FFF7FEFF 		bl	Paint_Clear
 525              	.LVL36:
 139:Src/main.c    ****     Paint_DrawPoint(10, 80, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 526              		.loc 1 139 0
 527 00a0 7B48     		ldr	r0, .L26+20
 528 00a2 FFF7FEFF 		bl	puts
 529              	.LVL37:
 140:Src/main.c    ****     Paint_DrawPoint(10, 90, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 530              		.loc 1 140 0
 531 00a6 0126     		movs	r6, #1
 532 00a8 0096     		str	r6, [sp]
 533 00aa 3346     		mov	r3, r6
 534 00ac 0022     		movs	r2, #0
 535 00ae 5021     		movs	r1, #80
 536 00b0 0A20     		movs	r0, #10
 537 00b2 FFF7FEFF 		bl	Paint_DrawPoint
 538              	.LVL38:
 141:Src/main.c    ****     Paint_DrawPoint(10, 100, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 539              		.loc 1 141 0
 540 00b6 0096     		str	r6, [sp]
 541 00b8 0223     		movs	r3, #2
 542 00ba 0022     		movs	r2, #0
 543 00bc 5A21     		movs	r1, #90
 544 00be 0A20     		movs	r0, #10
 545 00c0 FFF7FEFF 		bl	Paint_DrawPoint
 546              	.LVL39:
 142:Src/main.c    ****     Paint_DrawLine(20, 70, 70, 120, BLACK, LINE_STYLE_SOLID, DOT_PIXEL_1X1);
 547              		.loc 1 142 0
 548 00c4 0096     		str	r6, [sp]
 549 00c6 0323     		movs	r3, #3
 550 00c8 0022     		movs	r2, #0
 551 00ca 6421     		movs	r1, #100
 552 00cc 0A20     		movs	r0, #10
 553 00ce FFF7FEFF 		bl	Paint_DrawPoint
 554              	.LVL40:
 143:Src/main.c    ****     Paint_DrawLine(70, 70, 20, 120, BLACK, LINE_STYLE_SOLID, DOT_PIXEL_1X1);
 555              		.loc 1 143 0
 556 00d2 0296     		str	r6, [sp, #8]
 557 00d4 0024     		movs	r4, #0
 558 00d6 0194     		str	r4, [sp, #4]
 559 00d8 0094     		str	r4, [sp]
 560 00da 7823     		movs	r3, #120
 561 00dc 4622     		movs	r2, #70
 562 00de 1146     		mov	r1, r2
 563 00e0 1420     		movs	r0, #20
ARM GAS  /tmp/ccypGBLc.s 			page 19


 564 00e2 FFF7FEFF 		bl	Paint_DrawLine
 565              	.LVL41:
 144:Src/main.c    ****     Paint_DrawRectangle(20, 70, 70, 120, BLACK, DRAW_FILL_EMPTY, DOT_PIXEL_1X1);
 566              		.loc 1 144 0
 567 00e6 0296     		str	r6, [sp, #8]
 568 00e8 0194     		str	r4, [sp, #4]
 569 00ea 0094     		str	r4, [sp]
 570 00ec 7823     		movs	r3, #120
 571 00ee 1422     		movs	r2, #20
 572 00f0 4621     		movs	r1, #70
 573 00f2 0846     		mov	r0, r1
 574 00f4 FFF7FEFF 		bl	Paint_DrawLine
 575              	.LVL42:
 145:Src/main.c    ****     Paint_DrawRectangle(80, 70, 130, 120, BLACK, DRAW_FILL_FULL, DOT_PIXEL_1X1);
 576              		.loc 1 145 0
 577 00f8 0296     		str	r6, [sp, #8]
 578 00fa 0194     		str	r4, [sp, #4]
 579 00fc 0094     		str	r4, [sp]
 580 00fe 7823     		movs	r3, #120
 581 0100 4622     		movs	r2, #70
 582 0102 1146     		mov	r1, r2
 583 0104 1420     		movs	r0, #20
 584 0106 FFF7FEFF 		bl	Paint_DrawRectangle
 585              	.LVL43:
 146:Src/main.c    ****     Paint_DrawCircle(45, 95, 20, BLACK, DRAW_FILL_EMPTY, DOT_PIXEL_1X1);
 586              		.loc 1 146 0
 587 010a 0296     		str	r6, [sp, #8]
 588 010c 0196     		str	r6, [sp, #4]
 589 010e 0094     		str	r4, [sp]
 590 0110 7823     		movs	r3, #120
 591 0112 8222     		movs	r2, #130
 592 0114 4621     		movs	r1, #70
 593 0116 5020     		movs	r0, #80
 594 0118 FFF7FEFF 		bl	Paint_DrawRectangle
 595              	.LVL44:
 147:Src/main.c    ****     Paint_DrawCircle(105, 95, 20, WHITE, DRAW_FILL_FULL, DOT_PIXEL_1X1);
 596              		.loc 1 147 0
 597 011c 0196     		str	r6, [sp, #4]
 598 011e 0094     		str	r4, [sp]
 599 0120 2346     		mov	r3, r4
 600 0122 1422     		movs	r2, #20
 601 0124 5F21     		movs	r1, #95
 602 0126 2D20     		movs	r0, #45
 603 0128 FFF7FEFF 		bl	Paint_DrawCircle
 604              	.LVL45:
 148:Src/main.c    ****     Paint_DrawLine(85, 95, 125, 95, BLACK, LINE_STYLE_DOTTED, DOT_PIXEL_1X1);
 605              		.loc 1 148 0
 606 012c 0196     		str	r6, [sp, #4]
 607 012e 0096     		str	r6, [sp]
 608 0130 3B46     		mov	r3, r7
 609 0132 1422     		movs	r2, #20
 610 0134 5F21     		movs	r1, #95
 611 0136 6920     		movs	r0, #105
 612 0138 FFF7FEFF 		bl	Paint_DrawCircle
 613              	.LVL46:
 149:Src/main.c    ****     Paint_DrawLine(105, 75, 105, 115, BLACK, LINE_STYLE_DOTTED, DOT_PIXEL_1X1);
 614              		.loc 1 149 0
ARM GAS  /tmp/ccypGBLc.s 			page 20


 615 013c 0296     		str	r6, [sp, #8]
 616 013e 0196     		str	r6, [sp, #4]
 617 0140 0094     		str	r4, [sp]
 618 0142 5F23     		movs	r3, #95
 619 0144 7D22     		movs	r2, #125
 620 0146 1946     		mov	r1, r3
 621 0148 5520     		movs	r0, #85
 622 014a FFF7FEFF 		bl	Paint_DrawLine
 623              	.LVL47:
 150:Src/main.c    ****     Paint_DrawString_EN(10, 0, "waveshare", &Font16, BLACK, WHITE);
 624              		.loc 1 150 0
 625 014e 0296     		str	r6, [sp, #8]
 626 0150 0196     		str	r6, [sp, #4]
 627 0152 0094     		str	r4, [sp]
 628 0154 7323     		movs	r3, #115
 629 0156 6922     		movs	r2, #105
 630 0158 4B21     		movs	r1, #75
 631 015a 1046     		mov	r0, r2
 632 015c FFF7FEFF 		bl	Paint_DrawLine
 633              	.LVL48:
 151:Src/main.c    ****     Paint_DrawString_EN(10, 20, "hello world", &Font12, WHITE, BLACK);
 634              		.loc 1 151 0
 635 0160 4C4E     		ldr	r6, .L26+24
 636 0162 0197     		str	r7, [sp, #4]
 637 0164 0094     		str	r4, [sp]
 638 0166 3346     		mov	r3, r6
 639 0168 4B4A     		ldr	r2, .L26+28
 640 016a 2146     		mov	r1, r4
 641 016c 0A20     		movs	r0, #10
 642 016e FFF7FEFF 		bl	Paint_DrawString_EN
 643              	.LVL49:
 152:Src/main.c    ****     Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
 644              		.loc 1 152 0
 645 0172 DFF84881 		ldr	r8, .L26+64
 646 0176 0194     		str	r4, [sp, #4]
 647 0178 0097     		str	r7, [sp]
 648 017a 4346     		mov	r3, r8
 649 017c 474A     		ldr	r2, .L26+32
 650 017e 1421     		movs	r1, #20
 651 0180 0A20     		movs	r0, #10
 652 0182 FFF7FEFF 		bl	Paint_DrawString_EN
 653              	.LVL50:
 153:Src/main.c    ****     Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
 654              		.loc 1 153 0
 655 0186 0197     		str	r7, [sp, #4]
 656 0188 0094     		str	r4, [sp]
 657 018a 4346     		mov	r3, r8
 658 018c 444A     		ldr	r2, .L26+36
 659 018e 2121     		movs	r1, #33
 660 0190 0A20     		movs	r0, #10
 661 0192 FFF7FEFF 		bl	Paint_DrawNum
 662              	.LVL51:
 154:Src/main.c    **** 
 663              		.loc 1 154 0
 664 0196 0194     		str	r4, [sp, #4]
 665 0198 0097     		str	r7, [sp]
 666 019a 3346     		mov	r3, r6
ARM GAS  /tmp/ccypGBLc.s 			page 21


 667 019c 414A     		ldr	r2, .L26+40
 668 019e 3221     		movs	r1, #50
 669 01a0 0A20     		movs	r0, #10
 670 01a2 FFF7FEFF 		bl	Paint_DrawNum
 671              	.LVL52:
 156:Src/main.c    ****     EPD_Display(BlackImage);
 672              		.loc 1 156 0
 673 01a6 4048     		ldr	r0, .L26+44
 674 01a8 FFF7FEFF 		bl	puts
 675              	.LVL53:
 157:Src/main.c    ****     DEV_Delay_ms(2000);
 676              		.loc 1 157 0
 677 01ac 2846     		mov	r0, r5
 678 01ae FFF7FEFF 		bl	EPD_Display
 679              	.LVL54:
 158:Src/main.c    **** #endif
 680              		.loc 1 158 0
 681 01b2 4FF4FA60 		mov	r0, #2000
 682 01b6 FFF7FEFF 		bl	HAL_Delay
 683              	.LVL55:
 162:Src/main.c    ****         printf("e-Paper init failed\r\n");
 684              		.loc 1 162 0
 685 01ba 3C48     		ldr	r0, .L26+48
 686 01bc FFF7FEFF 		bl	EPD_Init
 687              	.LVL56:
 688 01c0 80B9     		cbnz	r0, .L25
 689              	.L18:
 165:Src/main.c    ****     PAINT_TIME sPaint_time;
 690              		.loc 1 165 0
 691 01c2 2846     		mov	r0, r5
 692 01c4 FFF7FEFF 		bl	Paint_SelectImage
 693              	.LVL57:
 167:Src/main.c    ****     sPaint_time.Min = 34;
 694              		.loc 1 167 0
 695 01c8 0C23     		movs	r3, #12
 696 01ca 8DF81430 		strb	r3, [sp, #20]
 168:Src/main.c    ****     sPaint_time.Sec = 56;
 697              		.loc 1 168 0
 698 01ce 2223     		movs	r3, #34
 699 01d0 8DF81530 		strb	r3, [sp, #21]
 169:Src/main.c    ****     for (;;) {
 700              		.loc 1 169 0
 701 01d4 3823     		movs	r3, #56
 702 01d6 8DF81630 		strb	r3, [sp, #22]
 703 01da 26E0     		b	.L20
 704              	.LVL58:
 705              	.L24:
 706              	.LBB6:
 104:Src/main.c    ****     }
 707              		.loc 1 104 0
 708 01dc 3448     		ldr	r0, .L26+52
 709 01de FFF7FEFF 		bl	puts
 710              	.LVL59:
 711 01e2 20E7     		b	.L16
 712              	.LVL60:
 713              	.L25:
 714              	.LBE6:
ARM GAS  /tmp/ccypGBLc.s 			page 22


 163:Src/main.c    ****     }
 715              		.loc 1 163 0
 716 01e4 3248     		ldr	r0, .L26+52
 717 01e6 FFF7FEFF 		bl	puts
 718              	.LVL61:
 719 01ea EAE7     		b	.L18
 720              	.L19:
 185:Src/main.c    ****         Paint_DrawTime(15, 65, &sPaint_time, &Font20, WHITE, BLACK);
 721              		.loc 1 185 0
 722 01ec 314C     		ldr	r4, .L26+56
 723 01ee A288     		ldrh	r2, [r4, #4]
 724 01f0 E388     		ldrh	r3, [r4, #6]
 725 01f2 4133     		adds	r3, r3, #65
 726 01f4 C2EBC202 		rsb	r2, r2, r2, lsl #3
 727 01f8 0F32     		adds	r2, r2, #15
 728 01fa FF26     		movs	r6, #255
 729 01fc 0096     		str	r6, [sp]
 730 01fe 9BB2     		uxth	r3, r3
 731 0200 92B2     		uxth	r2, r2
 732 0202 4121     		movs	r1, #65
 733 0204 0F20     		movs	r0, #15
 734 0206 FFF7FEFF 		bl	Paint_ClearWindows
 735              	.LVL62:
 186:Src/main.c    **** 
 736              		.loc 1 186 0
 737 020a 0023     		movs	r3, #0
 738 020c 0193     		str	r3, [sp, #4]
 739 020e 0096     		str	r6, [sp]
 740 0210 2346     		mov	r3, r4
 741 0212 04AA     		add	r2, sp, #16
 742 0214 4121     		movs	r1, #65
 743 0216 0F20     		movs	r0, #15
 744 0218 FFF7FEFF 		bl	Paint_DrawTime
 745              	.LVL63:
 188:Src/main.c    ****         DEV_Delay_ms(500);//Analog clock 1s
 746              		.loc 1 188 0
 747 021c 2846     		mov	r0, r5
 748 021e FFF7FEFF 		bl	EPD_Display
 749              	.LVL64:
 189:Src/main.c    ****     }
 750              		.loc 1 189 0
 751 0222 4FF4FA70 		mov	r0, #500
 752 0226 FFF7FEFF 		bl	HAL_Delay
 753              	.LVL65:
 754              	.L20:
 171:Src/main.c    ****         if (sPaint_time.Sec == 60) {
 755              		.loc 1 171 0
 756 022a 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
 757 022e 0133     		adds	r3, r3, #1
 758 0230 DBB2     		uxtb	r3, r3
 759 0232 8DF81630 		strb	r3, [sp, #22]
 172:Src/main.c    ****             sPaint_time.Min = sPaint_time.Min + 1;
 760              		.loc 1 172 0
 761 0236 3C2B     		cmp	r3, #60
 762 0238 D8D1     		bne	.L19
 173:Src/main.c    ****             sPaint_time.Sec = 0;
 763              		.loc 1 173 0
ARM GAS  /tmp/ccypGBLc.s 			page 23


 764 023a 9DF81530 		ldrb	r3, [sp, #21]	@ zero_extendqisi2
 765 023e 0133     		adds	r3, r3, #1
 766 0240 DBB2     		uxtb	r3, r3
 767 0242 8DF81530 		strb	r3, [sp, #21]
 174:Src/main.c    ****             if (sPaint_time.Min == 60) {
 768              		.loc 1 174 0
 769 0246 0022     		movs	r2, #0
 770 0248 8DF81620 		strb	r2, [sp, #22]
 175:Src/main.c    ****                 sPaint_time.Hour =  sPaint_time.Hour + 1;
 771              		.loc 1 175 0
 772 024c 3C2B     		cmp	r3, #60
 773 024e CDD1     		bne	.L19
 176:Src/main.c    ****                 sPaint_time.Min = 0;
 774              		.loc 1 176 0
 775 0250 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 776 0254 0133     		adds	r3, r3, #1
 777 0256 DBB2     		uxtb	r3, r3
 778 0258 8DF81430 		strb	r3, [sp, #20]
 177:Src/main.c    ****                 if (sPaint_time.Hour == 24) {
 779              		.loc 1 177 0
 780 025c 8DF81520 		strb	r2, [sp, #21]
 178:Src/main.c    ****                     sPaint_time.Hour = 0;
 781              		.loc 1 178 0
 782 0260 182B     		cmp	r3, #24
 783 0262 C3D1     		bne	.L19
 179:Src/main.c    ****                     sPaint_time.Min = 0;
 784              		.loc 1 179 0
 785 0264 8DF81420 		strb	r2, [sp, #20]
 786 0268 C0E7     		b	.L19
 787              	.LVL66:
 788              	.L22:
 789              	.LBB7:
 113:Src/main.c    ****         return -1;
 790              		.loc 1 113 0
 791 026a 1348     		ldr	r0, .L26+60
 792              	.LVL67:
 793 026c FFF7FEFF 		bl	puts
 794              	.LVL68:
 795              	.LBE7:
 211:Src/main.c    **** 
 796              		.loc 1 211 0
 797 0270 4FF0FF30 		mov	r0, #-1
 798 0274 06B0     		add	sp, sp, #24
 799              	.LCFI10:
 800              		.cfi_def_cfa_offset 24
 801              		@ sp needed
 802 0276 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 803              	.LVL69:
 804              	.L27:
 805 027a 00BF     		.align	2
 806              	.L26:
 807 027c 00000000 		.word	lut_full_update
 808 0280 40000000 		.word	.LC2
 809 0284 50000000 		.word	.LC3
 810 0288 00000000 		.word	gImage_2in9
 811 028c 68000000 		.word	.LC4
 812 0290 80000000 		.word	.LC5
ARM GAS  /tmp/ccypGBLc.s 			page 24


 813 0294 00000000 		.word	Font16
 814 0298 94000000 		.word	.LC6
 815 029c A0000000 		.word	.LC7
 816 02a0 15CD5B07 		.word	123456789
 817 02a4 B168DE3A 		.word	987654321
 818 02a8 AC000000 		.word	.LC8
 819 02ac 00000000 		.word	lut_partial_update
 820 02b0 00000000 		.word	.LC0
 821 02b4 00000000 		.word	Font20
 822 02b8 18000000 		.word	.LC1
 823 02bc 00000000 		.word	Font12
 824              		.cfi_endproc
 825              	.LFE123:
 827              		.section	.text.Error_Handler,"ax",%progbits
 828              		.align	1
 829              		.global	Error_Handler
 830              		.syntax unified
 831              		.thumb
 832              		.thumb_func
 833              		.fpu fpv4-sp-d16
 835              	Error_Handler:
 836              	.LFB128:
 389:Src/main.c    **** 
 390:Src/main.c    **** /* USER CODE BEGIN 4 */
 391:Src/main.c    **** 
 392:Src/main.c    **** /* USER CODE END 4 */
 393:Src/main.c    **** 
 394:Src/main.c    **** /**
 395:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 396:Src/main.c    ****   * @retval None
 397:Src/main.c    ****   */
 398:Src/main.c    **** void Error_Handler(void)
 399:Src/main.c    **** {
 837              		.loc 1 399 0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 0
 840              		@ frame_needed = 0, uses_anonymous_args = 0
 841              		@ link register save eliminated.
 400:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 401:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 402:Src/main.c    **** 
 403:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 404:Src/main.c    **** }
 842              		.loc 1 404 0
 843 0000 7047     		bx	lr
 844              		.cfi_endproc
 845              	.LFE128:
 847              		.comm	huart2,120,4
 848              		.comm	hspi1,100,4
 849              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 850              		.align	2
 851              	.LC0:
 852 0000 652D5061 		.ascii	"e-Paper init failed\015\000"
 852      70657220 
 852      696E6974 
 852      20666169 
 852      6C65640D 
ARM GAS  /tmp/ccypGBLc.s 			page 25


 853 0015 000000   		.space	3
 854              	.LC1:
 855 0018 4661696C 		.ascii	"Failed to apply for black memory...\015\000"
 855      65642074 
 855      6F206170 
 855      706C7920 
 855      666F7220 
 856 003d 000000   		.space	3
 857              	.LC2:
 858 0040 5061696E 		.ascii	"Paint_NewImage\015\000"
 858      745F4E65 
 858      77496D61 
 858      67650D00 
 859              	.LC3:
 860 0050 73686F77 		.ascii	"show image for array\015\000"
 860      20696D61 
 860      67652066 
 860      6F722061 
 860      72726179 
 861 0066 0000     		.space	2
 862              	.LC4:
 863 0068 53656C65 		.ascii	"SelectImage:BlackImage\015\000"
 863      6374496D 
 863      6167653A 
 863      426C6163 
 863      6B496D61 
 864              	.LC5:
 865 0080 44726177 		.ascii	"Drawing:BlackImage\015\000"
 865      696E673A 
 865      426C6163 
 865      6B496D61 
 865      67650D00 
 866              	.LC6:
 867 0094 77617665 		.ascii	"waveshare\000"
 867      73686172 
 867      6500
 868 009e 0000     		.space	2
 869              	.LC7:
 870 00a0 68656C6C 		.ascii	"hello world\000"
 870      6F20776F 
 870      726C6400 
 871              	.LC8:
 872 00ac 4550445F 		.ascii	"EPD_Display\015\000"
 872      44697370 
 872      6C61790D 
 872      00
 873              		.text
 874              	.Letext0:
 875              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 876              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 877              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 878              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 879              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 880              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 881              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 882              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
 883              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
ARM GAS  /tmp/ccypGBLc.s 			page 26


 884              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 885              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
 886              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 887              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 888              		.file 15 "Display/e-Paper/EPD_2in9.h"
 889              		.file 16 "Display/GUI/../Fonts/fonts.h"
 890              		.file 17 "Display/GUI/GUI_Paint.h"
 891              		.file 18 "Display/e-Paper/ImageData.h"
 892              		.file 19 "/usr/arm-none-eabi/include/sys/lock.h"
 893              		.file 20 "/usr/arm-none-eabi/include/sys/_types.h"
 894              		.file 21 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 895              		.file 22 "/usr/arm-none-eabi/include/sys/reent.h"
 896              		.file 23 "/usr/arm-none-eabi/include/stdlib.h"
 897              		.file 24 "<built-in>"
 898              		.file 25 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
ARM GAS  /tmp/ccypGBLc.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccypGBLc.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccypGBLc.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccypGBLc.s:165    .text.MX_GPIO_Init:00000000000000c8 $d
     /tmp/ccypGBLc.s:173    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccypGBLc.s:179    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccypGBLc.s:223    .text.MX_USART2_UART_Init:0000000000000028 $d
                            *COM*:0000000000000078 huart2
     /tmp/ccypGBLc.s:229    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccypGBLc.s:235    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccypGBLc.s:291    .text.MX_SPI1_Init:000000000000003c $d
                            *COM*:0000000000000064 hspi1
     /tmp/ccypGBLc.s:297    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccypGBLc.s:304    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccypGBLc.s:407    .text.main:0000000000000000 $t
     /tmp/ccypGBLc.s:414    .text.main:0000000000000000 main
     /tmp/ccypGBLc.s:807    .text.main:000000000000027c $d
     /tmp/ccypGBLc.s:828    .text.Error_Handler:0000000000000000 $t
     /tmp/ccypGBLc.s:835    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccypGBLc.s:850    .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_SPI_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_PWREx_ControlVoltageScaling
HAL_Init
EPD_Init
EPD_Clear
HAL_Delay
malloc
puts
Paint_NewImage
Paint_SelectImage
Paint_Clear
Paint_DrawBitMap
EPD_Display
Paint_DrawPoint
Paint_DrawLine
Paint_DrawRectangle
Paint_DrawCircle
Paint_DrawString_EN
Paint_DrawNum
Paint_ClearWindows
Paint_DrawTime
lut_full_update
gImage_2in9
Font16
lut_partial_update
Font20
Font12
ARM GAS  /tmp/ccypGBLc.s 			page 28


